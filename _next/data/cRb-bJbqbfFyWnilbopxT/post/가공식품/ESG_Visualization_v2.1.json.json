{"pageProps":{"fileStructure":[{"name":"Empty","type":"folder","link":"src/contents/Empty","dir":[{"name":"B001_Industry_Analysis_test.json","type":"file","link":"src/contents/Empty/B001_Industry_Analysis_test.json"},{"name":"B001_Industry_Analysis_test2.json","type":"file","link":"src/contents/Empty/B001_Industry_Analysis_test2.json"},{"name":"B002_Company_Analysis_test.json","type":"file","link":"src/contents/Empty/B002_Company_Analysis_test.json"}],"open":true},{"name":"Empty2","type":"folder","link":"src/contents/Empty2","dir":[{"name":"B002_Company_Analysis.json","type":"file","link":"src/contents/Empty2/B002_Company_Analysis.json"}],"open":true},{"name":"가공식품","type":"folder","link":"src/contents/가공식품","dir":[{"name":"ESG_Visualization_v2.1.json","type":"file","link":"src/contents/가공식품/ESG_Visualization_v2.1.json"}],"open":true}],"file":{"cells":[{"cell_type":"markdown","id":"f0794718","metadata":{},"source":["# Setting"]},{"cell_type":"code","execution_count":1,"id":"ed450875","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:40.043566Z","start_time":"2023-01-09T03:46:40.033890Z"}},"outputs":[{"data":{"text/html":["<style>.container { width:90% !important; }</style>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"}],"source":["from IPython.core.display import display, HTML\n","display(HTML(\"<style>.container { width:90% !important; }</style>\"))"]},{"cell_type":"code","execution_count":2,"id":"d415dc4b","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:40.989299Z","start_time":"2023-01-09T03:46:40.046498Z"},"scrolled":false},"outputs":[{"data":{"text/html":["        <script type=\"text/javascript\">\n","        window.PlotlyConfig = {MathJaxConfig: 'local'};\n","        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n","        if (typeof require !== 'undefined') {\n","        require.undef(\"plotly\");\n","        requirejs.config({\n","            paths: {\n","                'plotly': ['https://cdn.plot.ly/plotly-2.16.1.min']\n","            }\n","        });\n","        require(['plotly'], function(Plotly) {\n","            window._Plotly = Plotly;\n","        });\n","        }\n","        </script>\n","        "]},"metadata":{},"output_type":"display_data"}],"source":["import re\n","from datetime import datetime, timedelta\n","import pandas as pd\n","import numpy as np\n","import pandas_ta as ta\n","from pprint import pprint\n","from sqlalchemy import create_engine\n","import pymysql\n","import plotly.graph_objects as go\n","from plotly.subplots import make_subplots\n","import plotly.offline as py\n","import plotly.express as px\n","colors = px.colors.qualitative.Plotly\n","\n","import requests\n","from io import BytesIO\n","\n","import json\n","from tqdm import tqdm\n","\n","\n","\n","from pykrx import stock\n","import warnings\n","warnings.filterwarnings('ignore')\n","py.init_notebook_mode(connected=True)\n","\n","# Calling Other Data from Local or DB\n","## company_data = Edited Company Meta Data (KOSPI + KOSDAQ)\n","company_data = pd.read_csv('/Volumes/GoogleDrive/공유 드라이브/TEAM_DATA/Company_coverage/Final/Final_Company_Coverage.csv',dtype={'corp_code':'str','stock_code':'str'},index_col=0)\n","company_data.corp_code = company_data.corp_code.apply(lambda x: x.zfill(8))\n","company_data.stock_code = company_data.stock_code.apply(lambda x: x.zfill(6))\n","\n","# Dictionary for Mapping\n","## corp_name -> corp_code, stock_code\n","corp_map = {}\n","for i in range(company_data.shape[0]):\n","    corp_map[company_data.stock_name[i]] = {'corp_code':company_data.corp_code[i],'stock_code':company_data.stock_code[i]}\n","\n","## GIC -> Code Mapping\n","gic = pd.read_csv('/Volumes/GoogleDrive/공유 드라이브/TEAM_DATA/Company_coverage/Final/CodeBook/General Issue Category.csv')\n","gic_map = {}\n","for i in range(gic.shape[0]):\n","    gic_map[gic['Code'][i]] = gic['General Issue Category'][i]\n","code_map = {value:key  for key,value in gic_map.items()}\n","\n","## key: 산업군, value: 화사명\n","industry_lst = company_data['SICS Codified Industry'].unique().tolist()\n","industry_dic = {}\n","for ind in industry_lst:\n","    industry_dic[ind] = company_data[company_data['SICS Codified Industry'] == ind].stock_name.to_list()"]},{"cell_type":"markdown","id":"407fcb84","metadata":{},"source":["# Call API"]},{"cell_type":"code","execution_count":3,"id":"b73f43c4","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:40.994016Z","start_time":"2023-01-09T03:46:40.990882Z"},"scrolled":true},"outputs":[],"source":["def get_risk_score(corp_code, from_, to_,nfr,code,materiality):\n","    url = f'http://fairlabdevserver-env.eba-3d4ejgtz.ap-northeast-2.elasticbeanstalk.com/company/{corp_code}/esg/risk-research?from={from_}&to={to_}&nfr={nfr}&code={code}&materiality={materiality}'\n","    headers = {'Authorization' : 'Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo1NCwicmVmcmVzaF90b2tlbiI6ImNLbXhJRWdUUUdZQTRwMmpzZHhTUjZMTzZMQnUyX25UdU03TGtCWXRfN09Ic042SWo0c1diVDR3NmNaUWJldVE0V1hYLTJ0dWQ1TWlZZG9EIn0.hsiwHK6rtfoOvqCTNRgWJ8TnFs201x889uMgyhJ3eDU'}\n","    response = requests.request(\"GET\", url, headers=headers)\n","    data = pd.read_json(BytesIO(response.content))\n","    return data\n","\n","\n","# corp_code = corp_map['삼성전자']['corp_code']\n","# from_=1504267200\n","# to_=1640952000\n","# data = get_risk_score(corp_code, from_, to_,'0,1','110,230','data')\n"]},{"cell_type":"code","execution_count":4,"id":"cb36c587","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.000378Z","start_time":"2023-01-09T03:46:40.997489Z"},"scrolled":false},"outputs":[],"source":["def get_data_materiality(corp_code):\n","    url = f'http://fairlabdevserver-env.eba-3d4ejgtz.ap-northeast-2.elasticbeanstalk.com/company/{corp_code}/esg/data-materiality'\n","    headers = {'Authorization' : 'Token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo1NCwicmVmcmVzaF90b2tlbiI6ImNLbXhJRWdUUUdZQTRwMmpzZHhTUjZMTzZMQnUyX25UdU03TGtCWXRfN09Ic042SWo0c1diVDR3NmNaUWJldVE0V1hYLTJ0dWQ1TWlZZG9EIn0.hsiwHK6rtfoOvqCTNRgWJ8TnFs201x889uMgyhJ3eDU'}\n","    response = requests.request(\"GET\", url, headers=headers)\n","    return response\n","\n","# corp_code = corp_map['삼성전자']['corp_code']\n","# data = get_data_materiality(corp_code)\n","# data.content.decode().replace('[\"','').replace('\"]','').replace('\"','').split(',')"]},{"cell_type":"code","execution_count":5,"id":"b59ddc55","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.005896Z","start_time":"2023-01-09T03:46:41.001736Z"}},"outputs":[],"source":["from sqlalchemy import create_engine\n","\n","def get_redshift_con():\n","    redshift_user = \"redshiftuser\"\n","    redshift_pass = \"Qwerqwer!1234\"\n","    redshift_endpoint = \"fairlabs-dev-redshift.cl0jszn3jioi.ap-northeast-2.redshift.amazonaws.com\"\n","    port = 5439\n","    dbname = \"dev\"\n","    engine_string = \"postgresql+psycopg2://%s:%s@%s:%d/%s\" \\\n","                    % (redshift_user, redshift_pass, redshift_endpoint, port, dbname)\n","    engine = create_engine(engine_string)\n","    redshift_con = engine.connect()\n","\n","    return redshift_con\n","\n","def get_esg_exposure(corp_code, from_, to_):\n","    conn = get_redshift_con()\n","    query = f\"\"\"\n","                SELECT \n","                     g.general_issue_code, date(timestamp 'epoch' + t.time * interval '1 second'), SUM(t.relevance) as esg_exposure\n","                FROM\n","                    entity as e\n","                JOIN\n","                    taxonomy as t\n","                ON \n","                    e.news_id = t.news_id\n","                JOIN\n","                    general_issue as g\n","                ON\n","                    t.tax_code = g.tax_code\n","                WHERE\n","                        e.corp_code = '{corp_code}'\n","                    AND\n","                        t.taxonomy = 'sasb'\n","                    AND\n","                        date(timestamp 'epoch' + t.time * interval '1 second') >= '{from_}'\n","                    AND\n","                        date(timestamp 'epoch' + t.time * interval '1 second') <= '{to_}'\n","                GROUP BY \n","                    g.general_issue_code, date(timestamp 'epoch' + t.time * interval '1 second')\n","            ;\"\"\"\n","    res = conn.execute(query)\n","    return res.fetchall()\n","\n","# esg_exposure = get_esg_exposure('00126380', '2022-09-01', '2022-09-05')"]},{"cell_type":"markdown","id":"f1382cda","metadata":{},"source":["# Call Data"]},{"cell_type":"code","execution_count":6,"id":"359012be","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.011057Z","start_time":"2023-01-09T03:46:41.007538Z"}},"outputs":[],"source":["def setTime(start_year=2016, start_month=1, start_day=1, end_year=2021, end_month=12, end_day=31):\n","    from_ts = int(datetime(start_year, start_month, start_day).timestamp())\n","    to_ts = int(datetime(end_year, end_month, end_day).timestamp())\n","    from_ts_str1 = f'{start_year}{str(start_month).zfill(2)}{str(start_day).zfill(2)}'\n","    to_ts_str1 = f'{end_year}{str(end_month).zfill(2)}{str(end_day).zfill(2)}'\n","    from_ts_str2 = f'{start_year}-{str(start_month).zfill(2)}-{str(start_day).zfill(2)}'\n","    to_ts_str2 = f'{end_year}-{str(end_month).zfill(2)}-{str(end_day).zfill(2)}'\n","    return (from_ts, to_ts,from_ts_str1,to_ts_str1,from_ts_str2,to_ts_str2)"]},{"cell_type":"code","execution_count":7,"id":"55c80e4b","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.015701Z","start_time":"2023-01-09T03:46:41.012925Z"}},"outputs":[],"source":["def call_stock_data(comp_name,from_ts_str,to_ts_str):\n","    stock_df = stock.get_market_ohlcv(from_ts_str,to_ts_str,corp_map[comp_name]['stock_code'])\n","    stock_df.index.name ='date'\n","    stock_df.index = pd.to_datetime(stock_df.index)\n","    return stock_df"]},{"cell_type":"code","execution_count":8,"id":"ec8033b7","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.021746Z","start_time":"2023-01-09T03:46:41.017405Z"}},"outputs":[],"source":["def available_data(corp_code,materiality = 'data'):\n","#     corp_code = corp_map[comp_name]['corp_code']\n","    data_mat_gics = get_data_materiality(corp_code).content.decode().replace('[\"','').replace('\"]','').replace('\"','').split(',')\n","    sasb_mat_gics = company_data[company_data['corp_code'] == corp_code]['gic_industry_base_code'].values[0].replace('[','').replace(']','').replace(\"'\",'').replace(' ','').split(',')\n","    sasb_result = list(set(sasb_mat_gics).intersection(set(data_mat_gics)))\n","\n","    if materiality == 'data':\n","#         print('Data Materiality!')\n","        try:\n","            [gic_map[int(code)] for code in data_mat_gics]\n","            return ','.join(data_mat_gics)\n","        except:\n","            return ''\n","    \n","    elif materiality == 'sasb':\n","#         print('SASB Materiality!')\n","        [gic_map[int(code)] for code in sasb_result]\n","        return ','.join(sasb_result)\n","\n","    "]},{"cell_type":"code","execution_count":9,"id":"8f019d02","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.030678Z","start_time":"2023-01-09T03:46:41.025490Z"},"code_folding":[]},"outputs":[],"source":["def call_esg_data(comp_name,from_ts,to_ts,industry = False,scaled = 1,data_top = 5):\n","    # corp_code 호출\n","    corp_code = corp_map[comp_name]['corp_code']\n","    \n","    # data driven data 호출\n","    data_code = available_data(corp_code,'data')\n","    data_result = get_risk_score(corp_code, from_ts, to_ts,scaled,data_code,'data')\n","    \n","    # sasb driven data 호출\n","    sasb_code = available_data(corp_code,'sasb')\n","    sasb_result = get_risk_score(corp_code, from_ts, to_ts,scaled,sasb_code,'sasb')\n","    \n","    # data driven, sasb driven 병합\n","    result = pd.merge(data_result, sasb_result)\n","    result.corp_code = result.corp_code.apply(lambda x: str(x).zfill(8))\n","    \n","    # data driven code 중 top n개 추출\n","    if industry == False:\n","        try:\n","            temp = list(result[list(f'risk_score_{x}' for x in data_code.split(','))].mean().sort_values(ascending=False).head(data_top).index)\n","            data_extract_code = [x[-3:] for x in temp]\n","        except:\n","            data_extract_code = []\n","    else:\n","        data_extract_code = data_code.split(',')\n","    # sasb driven code 추출\n","    sasb_extract_code = sasb_code.split(',')\n","#     print(sasb_extract_code, data_extract_code)\n","    # 세가지 데이터 반환\n","    return sasb_extract_code, data_extract_code, result"]},{"cell_type":"code","execution_count":10,"id":"b61a09ef","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.034543Z","start_time":"2023-01-09T03:46:41.032209Z"}},"outputs":[],"source":["# setTime(start_year=2021, start_month=10, start_day=31, end_year=2022, end_month=11, end_day=30)"]},{"cell_type":"code","execution_count":11,"id":"50c0c8b5","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.038137Z","start_time":"2023-01-09T03:46:41.036101Z"}},"outputs":[],"source":["# a,b,c = call_esg_data('포스코인터내셔널','1635606000','1669734000',industry = False,scaled = 1,data_top = 5)\n","# a, b"]},{"cell_type":"code","execution_count":12,"id":"d306e8e5","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.041643Z","start_time":"2023-01-09T03:46:41.039566Z"}},"outputs":[],"source":["# c"]},{"cell_type":"markdown","id":"3276b5f7","metadata":{},"source":["# Company Detail"]},{"cell_type":"code","execution_count":13,"id":"a16587e6","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.080385Z","start_time":"2023-01-09T03:46:41.043343Z"}},"outputs":[],"source":["def company_chart_general(stock_df,esg_df,time_window,data_code=[],sasb_code=[],vertical_line=False):\n","    '''\n","    stock_df: 주식 데이터\n","    esg_df: call_data 함수 결과(세 번째)\n","    time_window: 이슈발생 지점 (pulse 최고점) 선정에 사용되는 기간\n","    data_code: call_data 함수 결과(두 번째)\n","    sasb_code: call_data 함수 결과(첫 번째)\n","    vertical_line: detail chart의 세로선 여부\n","    '''\n","    fig = go.Figure()\n","    fig = make_subplots(rows=5,cols=1,shared_xaxes=True,\n","                        specs = [[{\"secondary_y\": True, \"rowspan\":3}],\n","                                 [None],[None],\n","                                 [{\"rowspan\":2}],[None]])\n","\n","    # Stock Chart\n","    # Index:0\n","    fig.add_trace(\n","        go.Scatter(x=stock_df.index,\n","                   y=stock_df.종가,\n","                   mode='lines',name='Close Price',\n","                   line_color='black'),\n","                  secondary_y=True,\n","                  row=1,col=1)\n","\n","    # Pulse Chart\n","    ## Index: 1,2\n","    x = pd.date_range(esg_df.date[0],esg_df.date[esg_df.shape[0]-1])\n","    try:\n","        fig.add_trace(go.Scatter(x=x, y=esg_df['nfr_sasb_scaled_pulse'],\n","                                 mode='lines', name='NFR Pulse SASB',line_color = 'red'), secondary_y=False,row=1,col=1)\n","        fig.add_trace(go.Scatter(x=x, y=esg_df['nfr_data_scaled_pulse'],\n","                                 mode='lines', name='NFR Pulse DATA',line_color= 'blue'), secondary_y=False, row=1,col=1)\n","    except:\n","        print('There is no available data')\n","\n","        \n","    esg_df[(esg_df.nfr_data_scaled_pulse.diff(20)>15)&(esg_df.nfr_data_scaled_pulse.diff(1)>0)&(esg_df.nfr_data_scaled_pulse.diff(-1)>0)]\n","    # Score_Chart\n","    ## Index: 3,4\n","    fig.add_trace(go.Scatter(x=x, y=esg_df['nfr_sasb_scaled_score'],\n","                             mode='lines', name='NFR Score SASB'), secondary_y=False,row=1,col=1) \n","    fig.add_trace(go.Scatter(x=x, y=esg_df['nfr_data_scaled_score'],\n","                             mode='lines', name='NFR Score DATA'), secondary_y=False,row=1,col=1)     \n","\n","\n","    # RSI Chart\n","    # Index: 5,6\n","    fig.add_trace(go.Scatter(x=x, y=esg_df['nfr_sasb_scaled_score_rsi'],\n","                                 mode='lines', name='NFR Score RSI'), row=4,col=1)\n","    fig.add_trace(go.Scatter(x=x, y=esg_df['nfr_data_scaled_score_rsi'],\n","                                 mode='lines', name='NFR Score RSI'), row=4,col=1)\n","    fig.add_hline(y= 30,annotation_text = 'Low Momentum',line_color = 'blue',annotation_font_size=10, annotation_font_color=\"blue\",annotation_position = 'bottom left',row=4,col=1)\n","    fig.add_hline(y= 70,annotation_text = 'High Momentum',line_color = 'red',annotation_font_size=10, annotation_font_color=\"red\",annotation_position = 'bottom left',row=4,col=1)\n","\n","    # Data Point\n","    ## Data Setting\n","    temp = esg_df[-time_window:]\n","    ## Data for Data Driven points\n","    data_points_data = esg_df[(esg_df.nfr_data_scaled_pulse == esg_df.nfr_data_scaled_pulse.rolling(time_window).max())&\n","                              (esg_df.nfr_data_scaled_pulse == esg_df.nfr_data_scaled_pulse[::-1].rolling(time_window).max()[::-1])&\n","                              (esg_df.nfr_data_scaled_pulse > esg_df.nfr_data_scaled_pulse.mean())].reset_index(drop=True)\n","    last_data = temp[(temp.nfr_data_scaled_pulse == temp.nfr_data_scaled_pulse.max())&(temp.nfr_data_scaled_pulse > temp.nfr_data_scaled_pulse[temp.index[0]])]\n","    data_points_data = pd.concat([data_points_data,last_data]).reset_index(drop=True)\n","    ## Data for SASB Driven points\n","    data_points_sasb = esg_df[(esg_df.nfr_sasb_scaled_pulse == esg_df.nfr_sasb_scaled_pulse.rolling(time_window).max())&\n","                              (esg_df.nfr_sasb_scaled_pulse == esg_df.nfr_sasb_scaled_pulse[::-1].rolling(time_window).max()[::-1])&\n","                              (esg_df.nfr_sasb_scaled_pulse > esg_df.nfr_sasb_scaled_pulse.mean())].reset_index(drop=True)\n","    last_sasb = temp[(temp.nfr_sasb_scaled_pulse == temp.nfr_sasb_scaled_pulse.max())&(temp.nfr_sasb_scaled_pulse > temp.nfr_sasb_scaled_pulse[temp.index[0]])]\n","    data_points_sasb = pd.concat([data_points_sasb,last_sasb]).reset_index(drop = True)\n","    \n","    ## Set Annotation\n","    data_annotations = []\n","    for i in data_points_data.index:\n","        data_annotations.append(dict(x=data_points_data['date'][i],\n","                                     y=data_points_data['nfr_data_scaled_pulse'][i],\n","                                     xref=\"x\", yref=\"y\",\n","                                     text=f\"[Issue Point]<br>{data_points_data['date'][i].strftime('%Y-%m-%d')}<br>{round(data_points_data['nfr_data_scaled_pulse'][i],1)}\",\n","                                     font=dict(color = 'blue',size=8),\n","                                     ax=0, ay=-40))\n","\n","    sasb_annotations = []\n","    for i in data_points_sasb.index:\n","        sasb_annotations.append(dict(x=data_points_sasb['date'][i],\n","                                     y=data_points_sasb['nfr_sasb_scaled_pulse'][i],\n","                                     xref=\"x\", yref=\"y\",\n","                                     text=f\"[Issue Point]<br>{data_points_sasb['date'][i].strftime('%Y-%m-%d')}<br>{round(data_points_sasb['nfr_sasb_scaled_pulse'][i],1)}\",\n","                                     font=dict(color = 'red',size=8),\n","                                     ax=0, ay=-40))\n","        \n","    # Design Button options\n","    fig.update_layout(\n","        updatemenus=[\n","            dict(\n","                type='buttons',\n","                active=0,\n","                buttons=list([\n","                    dict(label=\"None\",\n","                         method=\"update\",\n","                         args=[{\"visible\": [True, False, False, True, True, True, True]},\n","                               {\"title\": f'<b><{esg_df.corp_code.unique()[0]} : {company_data[company_data.corp_code == esg_df.corp_code.unique()[0]].corp_name.values[0]}> General Chart<b>',\n","                                \"annotations\":[]}]),\n","                    dict(label=\"Data Driven\",\n","                         method=\"update\",\n","                         args=[{\"visible\": [True, False, True, False, True, False, True]},\n","                               {\"title\": \"<b>Data Driven Index<b>\",\n","                                \"annotations\": data_annotations}]),\n","                    dict(label=\"SASB Driven\",\n","                         method=\"update\",\n","                         args=[{\"visible\": [True, True, False, True, False, True, False]},\n","                               {\"title\": \"<b>SASB Driven Index<b>\",\n","                                \"annotations\": sasb_annotations}]),\n","                    dict(label=\"Data Pulse VS SASB Pulse\",\n","                         method=\"update\",\n","                         args=[{\"visible\": [True, True, True, False, False, False, False]},\n","                               {\"title\": \"<b>Comparing Pulse<b>\",\n","                                \"annotations\":data_annotations+sasb_annotations}]),\n","                    dict(label=\"Data Score VS SASB Score\",\n","                         method=\"update\",\n","                         args=[{\"visible\": [True, False, False, True, True, True, True]},\n","                               {\"title\": \"<b>Comparing Score<b>\",\n","                                \"annotations\":[]}]),\n","                ]),\n","#                 xanchor=\"right\",\n","#                 x = - 0.15,\n","                font = dict(size=9),\n","                showactive = True,\n","                yanchor=\"top\",\n","                xanchor = 'right',\n","                direction = 'right',\n","                x=1,\n","                y=1.13,\n","\n","            )\n","        ])\n","    \n","\n","    fig.update_layout(title_text = f'<b><{esg_df.corp_code.unique()[0]} : {company_data[company_data.corp_code == esg_df.corp_code.unique()[0]].corp_name.values[0]}> General Chart<b>',\n","                      template=\"plotly_white\",hovermode = 'x unified',font = dict(size=10),\n","                      legend = dict(orientation=\"h\",yanchor= 'top',y=-0.15,font_size=9))\n","    fig.update_yaxes(title_text=\"<b>ESG Risk Index</b>\", secondary_y=False,row=1,col=1)\n","    fig.update_yaxes(title_text=\"<b>Stock Price</b>\", secondary_y=True,row=1,col=1)\n","    fig.update_yaxes(range=[0,100],title_text=\"<b>RSI<b>\",row=4,col=1)\n","    fig.update_xaxes(title_text=\"Date\",row=4,col=1)\n","    \n","    return fig\n","\n","def company_chart_detail(esg_df,time_window,data_code,sasb_code,vertical_line = False):\n","    \n","    '''\n","    esg_df: call_data 함수 결과(세 번째)\n","    time_window: 이슈발생 지점 (pulse 최고점) 선정에 사용되는 기간\n","    data_code: call_data 함수 결과(두 번째)\n","    sasb_code: call_data 함수 결과(첫 번째)\n","    vertical_line: detail chart의 세로선 여부\n","    '''\n","    \n","    # Data Point\n","    ## Data Setting\n","    temp = esg_df[-time_window:]\n","    ## Data for Data Driven points\n","    data_points_data = esg_df[(esg_df.nfr_data_scaled_pulse == esg_df.nfr_data_scaled_pulse.rolling(time_window).max())&\n","                              (esg_df.nfr_data_scaled_pulse == esg_df.nfr_data_scaled_pulse[::-1].rolling(time_window).max()[::-1])&\n","                              (esg_df.nfr_data_scaled_pulse > esg_df.nfr_data_scaled_pulse.mean())].reset_index(drop=True)\n","    last_data = temp[(temp.nfr_data_scaled_pulse == temp.nfr_data_scaled_pulse.max())&(temp.nfr_data_scaled_pulse > temp.nfr_data_scaled_pulse[temp.index[0]])]\n","\n","    data_points_data = pd.concat([data_points_data,last_data]).reset_index(drop=True)\n","    ## Data for SASB Driven points\n","    data_points_sasb = esg_df[(esg_df.nfr_sasb_scaled_pulse == esg_df.nfr_sasb_scaled_pulse.rolling(time_window).max())&\n","                              (esg_df.nfr_sasb_scaled_pulse == esg_df.nfr_sasb_scaled_pulse[::-1].rolling(time_window).max()[::-1])&\n","                              (esg_df.nfr_sasb_scaled_pulse > esg_df.nfr_sasb_scaled_pulse.mean())].reset_index(drop=True)\n","    last_sasb = temp[(temp.nfr_sasb_scaled_pulse == temp.nfr_sasb_scaled_pulse.max())&(temp.nfr_sasb_scaled_pulse > temp.nfr_sasb_scaled_pulse[temp.index[0]])]\n","    data_points_sasb = pd.concat([data_points_sasb,last_sasb]).reset_index(drop = True)\n","    \n","    ## Set Annotation\n","    data_annotations = []\n","    for i in data_points_data.index:\n","        data_annotations.append(dict(x=data_points_data['date'][i],\n","                                     y=data_points_data['nfr_data_scaled_pulse'][i],\n","                                     xref=\"x\", yref=\"y\",\n","                                     text=f\"[Issue Point]<br>{data_points_data['date'][i].strftime('%Y-%m-%d')}<br>{round(data_points_data['nfr_data_scaled_pulse'][i],1)}\",\n","                                     font=dict(color = 'blue',size=7),\n","                                     ax=0, ay=-40))\n","\n","    sasb_annotations = []\n","    for i in data_points_sasb.index:\n","        sasb_annotations.append(dict(x=data_points_sasb['date'][i],\n","                                     y=data_points_sasb['nfr_sasb_scaled_pulse'][i],\n","                                     xref=\"x\", yref=\"y\",\n","                                     text=f\"[Issue Point]<br>{data_points_sasb['date'][i].strftime('%Y-%m-%d')}<br>{round(data_points_sasb['nfr_sasb_scaled_pulse'][i],1)}\",\n","                                     font=dict(color = 'red',size=7),\n","                                     ax=0, ay=-40))\n","\n","    # Visualization\n","    fig = go.Figure()\n","    x = pd.date_range(esg_df.date[0],esg_df.date[esg_df.shape[0]-1])\n","\n","    \n","    ## Data Pulse\n","    fig.add_trace(go.Scatter(x=x, y=esg_df['nfr_data_scaled_pulse'],\n","                             mode='lines', name='NFR Pulse DATA',line_color = 'blue'))\n","    \n","    ## SASB Pulse\n","    fig.add_trace(go.Scatter(x=x, y=esg_df['nfr_sasb_scaled_pulse'],\n","                             mode='lines', name='NFR Pulse SASB',line_color = 'red'))\n","    if vertical_line == True:\n","        ## V Line for Data Pulse\n","        for i in data_points_data.index:\n","            fig.add_vline(x=data_points_data['date'][i], line_width=2, line_dash=\"dash\",line_color='blue')    \n","        ## V Line for SASB Pulse\n","        for i in data_points_sasb.index:\n","            fig.add_vline(x=data_points_sasb['date'][i], line_width=2, line_dash=\"dash\",line_color='red')\n","\n","    fig.add_trace(go.Scatter(x=x, y=esg_df['nfr_data_scaled_score'],\n","                             mode='lines', name='NFR Score DATA'))\n","    fig.add_trace(go.Scatter(x=x, y=esg_df['nfr_sasb_scaled_score'],\n","                             mode='lines', name='NFR Score SASB')) \n","           \n","    \n","    \n","    visible_sub1 = []\n","    visible_sub2 = []\n","    for code in data_code:\n","        visible_sub1.append(True)\n","        visible_sub2.append(False)\n","        fig.add_trace(go.Scatter(x=x, y=esg_df[f'exp_scaled_{code}'],\n","                                 mode='lines', name=gic_map[int(code)]+' Pulse',\n","                                 visible = False))\n","\n","    for code in sasb_code:\n","        fig.add_trace(go.Scatter(x=x, y=esg_df[f'exp_scaled_{code}'],\n","                                 mode='lines', name=gic_map[int(code)]+' Pulse',\n","                                 visible = False))\n","\n","\n","\n","    for code in data_code:\n","        fig.add_trace(go.Scatter(x=x, y=esg_df[f'risk_score_{code}'],\n","                                 mode='lines', name=gic_map[int(code)]+' Risk Score',\n","                                 visible = False))\n","\n","\n","\n","    for code in sasb_code:\n","        fig.add_trace(go.Scatter(x=x, y=esg_df[f'risk_score_{code}'],\n","                                 mode='lines', name=gic_map[int(code)]+' Risk Score',\n","                                 visible = False))\n","\n","\n","\n","    fig.update_layout(\n","        updatemenus=[\n","            dict(\n","                type='buttons',\n","                active=0,\n","                buttons=list([\n","                    dict(label=\"None\",\n","                         method=\"update\",\n","                         args=[{\"visible\": [True,True,True,True] + visible_sub2*4},\n","                               {\"title\": f'<b><{esg_df.corp_code.unique()[0]} : {company_data[company_data.corp_code == esg_df.corp_code.unique()[0]].corp_name.values[0]}> ESG Detail<b>',\n","                                \"annotations\":data_annotations+sasb_annotations}]),\n","                    dict(label=\"Data Driven Pulse\",\n","                         method=\"update\",\n","                         args=[{\"visible\": [True,False,False,False] + visible_sub1 + visible_sub2*3},\n","                               {\"title\": \"<b>Data Driven Pulse Detail<b>\",\n","                                \"annotations\": data_annotations}]),\n","                    dict(label=\"SASB Driven Pulse\",\n","                         method=\"update\",\n","                         args=[{\"visible\": [False,True,False,True] + visible_sub2 + visible_sub1 + visible_sub2*2},\n","                               {\"title\": \"<b>SASB Driven Pulse Detail<b>\",\n","                                \"annotations\": sasb_annotations}]),\n","                    dict(label=\"Data Driven Score\",\n","                         method=\"update\",\n","                         args=[{\"visible\": [False,False,True,False] + visible_sub2*2 + visible_sub1 + visible_sub2},\n","                               {\"title\": \"<b>Data Driven Score Detail<b>\",\n","                                \"annotations\":[]}]),\n","                    dict(label=\"SASB Driven Score\",\n","                         method=\"update\",\n","                         args=[{\"visible\": [False,False,False,True] + visible_sub2*3 + visible_sub1},\n","                               {\"title\": \"<b>SASB Driven Score Detail<b>\",\n","                                \"annotations\":[]}]),\n","                ]),\n","#                 yanchor=\"bottom\",\n","#                 xanchor = 'left',\n","#                 font = dict(size=9),\n","#                 y=1.4,\n","#                 direction = 'right'\n","                font = dict(size=9),\n","                showactive = True,\n","                yanchor=\"top\",\n","                xanchor = 'right',\n","                direction = 'right',\n","                x=1,\n","                y=1.13,                \n","            )\n","        ])\n","\n","\n","    fig.update_layout(title_text = f'<b><{esg_df.corp_code.unique()[0]} : {company_data[company_data.corp_code == esg_df.corp_code.unique()[0]].corp_name.values[0]}> ESG Detail<b>',\n","                      template=\"plotly_white\",hovermode = 'x unified',font = dict(size=10),\n","                      legend = dict(orientation=\"h\",yanchor= 'top',y=-0.15,font_size=9))\n","    fig.update_yaxes(title_text=\"<b>ESG Risk Index</b>\")\n","    fig.update_xaxes(title_text=\"Date\")\n","    \n","    return fig"]},{"cell_type":"code","execution_count":14,"id":"eaad9b84","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.085447Z","start_time":"2023-01-09T03:46:41.082324Z"}},"outputs":[],"source":["def company_chart(stock_df,esg_df,time_window,data_code=[],sasb_code=[],vertical_line=False):\n","    general_chart = company_chart_general(stock_df,esg_df,time_window,data_code,sasb_code,vertical_line)\n","    \n","    if (data_code != [])|(sasb_code != []):\n","        detail_chart = company_chart_detail(esg_df,time_window,data_code,sasb_code,vertical_line)\n","    else:\n","        None\n","    \n","    general_chart.show()\n","    detail_chart.show()"]},{"cell_type":"code","execution_count":15,"id":"ddb418e6","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.090902Z","start_time":"2023-01-09T03:46:41.087124Z"}},"outputs":[],"source":["def company_analysis(comp_name,start,end,event_term=120,vertical_line = False):\n","    start_year, start_month, start_day = [int(x) for x in start.split('-')]\n","    end_year, end_month, end_day = [int(x) for x in end.split('-')]\n","    from_ts, to_ts,from_ts_str1,to_ts_str1,from_ts_str2,to_ts_str2 = setTime(start_year, start_month, start_day, end_year, end_month, end_day)\n","    \n","    sasb_code,data_code,esg_df = call_esg_data(comp_name,from_ts,to_ts)\n","    stock_df = call_stock_data(comp_name,from_ts_str1,to_ts_str1)\n","    company_chart(stock_df,esg_df,event_term,data_code,sasb_code,vertical_line)\n","    \n","    return sasb_code,data_code,esg_df"]},{"cell_type":"code","execution_count":16,"id":"8b3b2cb2","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.222093Z","start_time":"2023-01-09T03:46:41.092619Z"}},"outputs":[],"source":["# 데이터 마스킹 추가한 시각화\n","def company_chart_general(stock_df,esg_df,name,time_window,data_code=[],sasb_code=[],vertical_line=False):\n","    '''\n","    stock_df: 주식 데이터\n","    esg_df: call_data 함수 결과(세 번째)\n","    time_window: 이슈발생 지점 (pulse 최고점) 선정에 사용되는 기간\n","    data_code: call_data 함수 결과(두 번째)\n","    sasb_code: call_data 함수 결과(첫 번째)\n","    vertical_line: detail chart의 세로선 여부\n","    '''\n","    fig = go.Figure()\n","    fig = make_subplots(rows=5,cols=1,shared_xaxes=True,\n","                        specs = [[{\"secondary_y\": True, \"rowspan\":3}],\n","                                 [None],[None],\n","                                 [{\"rowspan\":2}],[None]])\n","\n","    # Stock Chart\n","    # Index:0\n","    fig.add_trace(\n","        go.Scatter(x=stock_df.index,\n","                   y=stock_df.종가,\n","                   mode='lines',name='Close Price',\n","                   line_color='black'),\n","                  secondary_y=True,\n","                  row=1,col=1)\n","\n","    # Pulse Chart\n","    ## Index: 1,2\n","    x = pd.date_range(esg_df.date[0],esg_df.date[esg_df.shape[0]-1])\n","    try:\n","        fig.add_trace(go.Scatter(x=x, y=esg_df['nfr_sasb_scaled_pulse'],\n","                                 mode='lines', name='NFR Pulse SASB',line_color = 'red'), secondary_y=False,row=1,col=1)\n","        fig.add_trace(go.Scatter(x=x, y=esg_df['nfr_data_scaled_pulse'],\n","                                 mode='lines', name='NFR Pulse DATA',line_color= 'blue'), secondary_y=False, row=1,col=1)\n","    except:\n","        print('There is no available data')\n","\n","        \n","    esg_df[(esg_df.nfr_data_scaled_pulse.diff(20)>15)&(esg_df.nfr_data_scaled_pulse.diff(1)>0)&(esg_df.nfr_data_scaled_pulse.diff(-1)>0)]\n","    # Score_Chart\n","    ## Index: 3,4\n","    fig.add_trace(go.Scatter(x=x, y=esg_df['nfr_sasb_scaled_score'],\n","                             mode='lines', name='NFR Score SASB'), secondary_y=False,row=1,col=1) \n","    fig.add_trace(go.Scatter(x=x, y=esg_df['nfr_data_scaled_score'],\n","                             mode='lines', name='NFR Score DATA'), secondary_y=False,row=1,col=1)     \n","\n","\n","    # RSI Chart\n","    # Index: 5,6\n","    fig.add_trace(go.Scatter(x=x, y=esg_df['nfr_sasb_scaled_score_rsi'],\n","                                 mode='lines', name='NFR Score RSI'), row=4,col=1)\n","    fig.add_trace(go.Scatter(x=x, y=esg_df['nfr_data_scaled_score_rsi'],\n","                                 mode='lines', name='NFR Score RSI'), row=4,col=1)\n","    fig.add_hline(y= 30,annotation_text = 'Low Momentum',line_color = 'blue',annotation_font_size=10, annotation_font_color=\"blue\",annotation_position = 'bottom left',row=4,col=1)\n","    fig.add_hline(y= 70,annotation_text = 'High Momentum',line_color = 'red',annotation_font_size=10, annotation_font_color=\"red\",annotation_position = 'bottom left',row=4,col=1)\n","\n","    # Data Point\n","    ## Data Setting\n","    temp = esg_df[-time_window:]\n","    ## Data for Data Driven points\n","    data_points_data = esg_df[(esg_df.nfr_data_scaled_pulse == esg_df.nfr_data_scaled_pulse.rolling(time_window).max())&\n","                              (esg_df.nfr_data_scaled_pulse == esg_df.nfr_data_scaled_pulse[::-1].rolling(time_window).max()[::-1])&\n","                              (esg_df.nfr_data_scaled_pulse > esg_df.nfr_data_scaled_pulse.mean())].reset_index(drop=True)\n","    last_data = temp[(temp.nfr_data_scaled_pulse == temp.nfr_data_scaled_pulse.max())&(temp.nfr_data_scaled_pulse > temp.nfr_data_scaled_pulse[temp.index[0]])]\n","    data_points_data = pd.concat([data_points_data,last_data]).reset_index(drop=True)\n","    ## Data for SASB Driven points\n","    data_points_sasb = esg_df[(esg_df.nfr_sasb_scaled_pulse == esg_df.nfr_sasb_scaled_pulse.rolling(time_window).max())&\n","                              (esg_df.nfr_sasb_scaled_pulse == esg_df.nfr_sasb_scaled_pulse[::-1].rolling(time_window).max()[::-1])&\n","                              (esg_df.nfr_sasb_scaled_pulse > esg_df.nfr_sasb_scaled_pulse.mean())].reset_index(drop=True)\n","    last_sasb = temp[(temp.nfr_sasb_scaled_pulse == temp.nfr_sasb_scaled_pulse.max())&(temp.nfr_sasb_scaled_pulse > temp.nfr_sasb_scaled_pulse[temp.index[0]])]\n","    data_points_sasb = pd.concat([data_points_sasb,last_sasb]).reset_index(drop = True)\n","    \n","    ## Set Annotation\n","    data_annotations = []\n","    for i in data_points_data.index:\n","        data_annotations.append(dict(x=data_points_data['date'][i],\n","                                     y=data_points_data['nfr_data_scaled_pulse'][i],\n","                                     xref=\"x\", yref=\"y\",\n","                                     text=f\"[Issue Point]<br>{data_points_data['date'][i].strftime('%Y-%m-%d')}<br>{round(data_points_data['nfr_data_scaled_pulse'][i],1)}\",\n","                                     font=dict(color = 'blue',size=8),\n","                                     ax=0, ay=-40))\n","\n","    sasb_annotations = []\n","    for i in data_points_sasb.index:\n","        sasb_annotations.append(dict(x=data_points_sasb['date'][i],\n","                                     y=data_points_sasb['nfr_sasb_scaled_pulse'][i],\n","                                     xref=\"x\", yref=\"y\",\n","                                     text=f\"[Issue Point]<br>{data_points_sasb['date'][i].strftime('%Y-%m-%d')}<br>{round(data_points_sasb['nfr_sasb_scaled_pulse'][i],1)}\",\n","                                     font=dict(color = 'red',size=8),\n","                                     ax=0, ay=-40))\n","        \n","    # Design Button options\n","    fig.update_layout(\n","        updatemenus=[\n","            dict(\n","                type='buttons',\n","                active=0,\n","                buttons=list([\n","                    dict(label=\"None\",\n","                         method=\"update\",\n","                         args=[{\"visible\": [True, False, False, True, True, True, True]},\n","                               {\"title\": f'<b><{name}> General Chart<b>',\n","                                \"annotations\":[]}]),\n","                    dict(label=\"Data Driven\",\n","                         method=\"update\",\n","                         args=[{\"visible\": [True, False, True, False, True, False, True]},\n","                               {\"title\": \"<b>Data Driven Index<b>\",\n","                                \"annotations\": data_annotations}]),\n","                    dict(label=\"SASB Driven\",\n","                         method=\"update\",\n","                         args=[{\"visible\": [True, True, False, True, False, True, False]},\n","                               {\"title\": \"<b>SASB Driven Index<b>\",\n","                                \"annotations\": sasb_annotations}]),\n","                    dict(label=\"Data Pulse VS SASB Pulse\",\n","                         method=\"update\",\n","                         args=[{\"visible\": [True, True, True, False, False, False, False]},\n","                               {\"title\": \"<b>Comparing Pulse<b>\",\n","                                \"annotations\":data_annotations+sasb_annotations}]),\n","                    dict(label=\"Data Score VS SASB Score\",\n","                         method=\"update\",\n","                         args=[{\"visible\": [True, False, False, True, True, True, True]},\n","                               {\"title\": \"<b>Comparing Score<b>\",\n","                                \"annotations\":[]}]),\n","                ]),\n","#                 xanchor=\"right\",\n","#                 x = - 0.15,\n","                font = dict(size=9),\n","                showactive = True,\n","                yanchor=\"top\",\n","                xanchor = 'right',\n","                direction = 'right',\n","                x=1,\n","                y=1.13,\n","\n","            )\n","        ])\n","    \n","\n","    fig.update_layout(title_text = f'<b><{name}> General Chart<b>',\n","                      template=\"plotly_white\",hovermode = 'x unified',font = dict(size=10),\n","                      legend = dict(orientation=\"h\",yanchor= 'top',y=-0.15,font_size=9))\n","    fig.update_yaxes(title_text=\"<b>ESG Risk Index</b>\", secondary_y=False,row=1,col=1)\n","    fig.update_yaxes(title_text=\"<b>Stock Price</b>\", secondary_y=True,row=1,col=1)\n","    fig.update_yaxes(range=[0,100],title_text=\"<b>RSI<b>\",row=4,col=1)\n","    fig.update_xaxes(title_text=\"Date\",row=4,col=1)\n","    \n","    return fig\n","\n","def company_chart_detail(esg_df,name,time_window,data_code,sasb_code,vertical_line = False):\n","    \n","    '''\n","    esg_df: call_data 함수 결과(세 번째)\n","    time_window: 이슈발생 지점 (pulse 최고점) 선정에 사용되는 기간\n","    data_code: call_data 함수 결과(두 번째)\n","    sasb_code: call_data 함수 결과(첫 번째)\n","    vertical_line: detail chart의 세로선 여부\n","    '''\n","    \n","    # Data Point\n","    ## Data Setting\n","    temp = esg_df[-time_window:]\n","    ## Data for Data Driven points\n","    data_points_data = esg_df[(esg_df.nfr_data_scaled_pulse == esg_df.nfr_data_scaled_pulse.rolling(time_window).max())&\n","                              (esg_df.nfr_data_scaled_pulse == esg_df.nfr_data_scaled_pulse[::-1].rolling(time_window).max()[::-1])&\n","                              (esg_df.nfr_data_scaled_pulse > esg_df.nfr_data_scaled_pulse.mean())].reset_index(drop=True)\n","    \n","    last_data = temp[(temp.nfr_data_scaled_pulse == temp.nfr_data_scaled_pulse.max())&\n","                     (temp.nfr_data_scaled_pulse > temp.nfr_data_scaled_pulse[temp.index[0]])]\n","    data_points_data = pd.concat([data_points_data,last_data]).reset_index(drop=True)\n","    ## Data for SASB Driven points\n","    data_points_sasb = esg_df[(esg_df.nfr_sasb_scaled_pulse == esg_df.nfr_sasb_scaled_pulse.rolling(time_window).max())&\n","                              (esg_df.nfr_sasb_scaled_pulse == esg_df.nfr_sasb_scaled_pulse[::-1].rolling(time_window).max()[::-1])&\n","                              (esg_df.nfr_sasb_scaled_pulse > esg_df.nfr_sasb_scaled_pulse.mean())].reset_index(drop=True)\n","    last_sasb = temp[(temp.nfr_sasb_scaled_pulse == temp.nfr_sasb_scaled_pulse.max())&\n","                     (temp.nfr_sasb_scaled_pulse > temp.nfr_sasb_scaled_pulse[temp.index[0]])]\n","    data_points_sasb = pd.concat([data_points_sasb,last_sasb]).reset_index(drop = True)\n","\n","    ## Set Annotation\n","    data_annotations = []\n","    for i in data_points_data.index:\n","        data_annotations.append(dict(x=data_points_data['date'][i],\n","                                     y=data_points_data['nfr_data_scaled_pulse'][i],\n","                                     xref=\"x\", yref=\"y\",\n","                                     text=f\"[Issue Point]<br>{data_points_data['date'][i].strftime('%Y-%m-%d')}<br>{round(data_points_data['nfr_data_scaled_pulse'][i],1)}\",\n","                                     font=dict(color = 'blue',size=7),\n","                                     ax=0, ay=-40))\n","\n","    sasb_annotations = []\n","    for i in data_points_sasb.index:\n","        sasb_annotations.append(dict(x=data_points_sasb['date'][i],\n","                                     y=data_points_sasb['nfr_sasb_scaled_pulse'][i],\n","                                     xref=\"x\", yref=\"y\",\n","                                     text=f\"[Issue Point]<br>{data_points_sasb['date'][i].strftime('%Y-%m-%d')}<br>{round(data_points_sasb['nfr_sasb_scaled_pulse'][i],1)}\",\n","                                     font=dict(color = 'red',size=7),\n","                                     ax=0, ay=-40))\n","\n","    # Visualization\n","    fig = go.Figure()\n","    x = pd.date_range(esg_df.date[0],esg_df.date[esg_df.shape[0]-1])\n","\n","    \n","    ## Data Pulse\n","    fig.add_trace(go.Scatter(x=x, y=esg_df['nfr_data_scaled_pulse'],\n","                             mode='lines', name='NFR Pulse DATA',line_color = 'blue'))\n","    \n","    ## SASB Pulse\n","    fig.add_trace(go.Scatter(x=x, y=esg_df['nfr_sasb_scaled_pulse'],\n","                             mode='lines', name='NFR Pulse SASB',line_color = 'red'))\n","    if vertical_line == True:\n","        ## V Line for Data Pulse\n","        for i in data_points_data.index:\n","            fig.add_vline(x=data_points_data['date'][i], line_width=2, line_dash=\"dash\",line_color='blue')    \n","        ## V Line for SASB Pulse\n","        for i in data_points_sasb.index:\n","            fig.add_vline(x=data_points_sasb['date'][i], line_width=2, line_dash=\"dash\",line_color='red')\n","\n","    fig.add_trace(go.Scatter(x=x, y=esg_df['nfr_data_scaled_score'],\n","                             mode='lines', name='NFR Score DATA'))\n","    fig.add_trace(go.Scatter(x=x, y=esg_df['nfr_sasb_scaled_score'],\n","                             mode='lines', name='NFR Score SASB')) \n","           \n","    \n","    \n","    visible_sub1 = []\n","    visible_sub2 = []\n","    for code in data_code:\n","        visible_sub1.append(True)\n","        visible_sub2.append(False)\n","        fig.add_trace(go.Scatter(x=x, y=esg_df[f'exp_scaled_{code}'],\n","                                 mode='lines', name=gic_map[int(code)]+' Pulse',\n","                                 visible = False))\n","\n","    for code in sasb_code:\n","        fig.add_trace(go.Scatter(x=x, y=esg_df[f'exp_scaled_{code}'],\n","                                 mode='lines', name=gic_map[int(code)]+' Pulse',\n","                                 visible = False))\n","\n","\n","\n","    for code in data_code:\n","        fig.add_trace(go.Scatter(x=x, y=esg_df[f'risk_score_{code}'],\n","                                 mode='lines', name=gic_map[int(code)]+' Risk Score',\n","                                 visible = False))\n","\n","\n","\n","    for code in sasb_code:\n","        fig.add_trace(go.Scatter(x=x, y=esg_df[f'risk_score_{code}'],\n","                                 mode='lines', name=gic_map[int(code)]+' Risk Score',\n","                                 visible = False))\n","\n","\n","\n","    fig.update_layout(\n","        updatemenus=[\n","            dict(\n","                type='buttons',\n","                active=0,\n","                buttons=list([\n","                    dict(label=\"None\",\n","                         method=\"update\",\n","                         args=[{\"visible\": [True,True,True,True] + visible_sub2*4},\n","                               {\"title\": f'<b><{name}> ESG Detail<b>',\n","                                \"annotations\":data_annotations+sasb_annotations}]),\n","                    dict(label=\"Data Driven Pulse\",\n","                         method=\"update\",\n","                         args=[{\"visible\": [True,False,False,False] + visible_sub1 + visible_sub2*3},\n","                               {\"title\": \"<b>Data Driven Pulse Detail<b>\",\n","                                \"annotations\": data_annotations}]),\n","                    dict(label=\"SASB Driven Pulse\",\n","                         method=\"update\",\n","                         args=[{\"visible\": [False,True,False,True] + visible_sub2 + visible_sub1 + visible_sub2*2},\n","                               {\"title\": \"<b>SASB Driven Pulse Detail<b>\",\n","                                \"annotations\": sasb_annotations}]),\n","                    dict(label=\"Data Driven Score\",\n","                         method=\"update\",\n","                         args=[{\"visible\": [False,False,True,False] + visible_sub2*2 + visible_sub1 + visible_sub2},\n","                               {\"title\": \"<b>Data Driven Score Detail<b>\",\n","                                \"annotations\":[]}]),\n","                    dict(label=\"SASB Driven Score\",\n","                         method=\"update\",\n","                         args=[{\"visible\": [False,False,False,True] + visible_sub2*3 + visible_sub1},\n","                               {\"title\": \"<b>SASB Driven Score Detail<b>\",\n","                                \"annotations\":[]}]),\n","                ]),\n","#                 yanchor=\"bottom\",\n","#                 xanchor = 'left',\n","#                 font = dict(size=9),\n","#                 y=1.4,\n","#                 direction = 'right'\n","                font = dict(size=9),\n","                showactive = True,\n","                yanchor=\"top\",\n","                xanchor = 'right',\n","                direction = 'right',\n","                x=1,\n","                y=1.13,                \n","            )\n","        ])\n","\n","\n","    fig.update_layout(title_text = f'<b><{name}> ESG Detail<b>',\n","                      template=\"plotly_white\",hovermode = 'x unified',font = dict(size=10),\n","                      legend = dict(orientation=\"h\",yanchor= 'top',y=-0.15,font_size=9))\n","    fig.update_yaxes(title_text=\"<b>ESG Risk Index</b>\")\n","    fig.update_xaxes(title_text=\"Date\")\n","    \n","    return fig\n","\n","def company_chart(stock_df,esg_df,name, time_window,data_code=[],sasb_code=[],vertical_line=False):\n","    general_chart = company_chart_general(stock_df,esg_df,name, time_window,data_code,sasb_code,vertical_line)\n","    \n","    if (data_code != [])|(sasb_code != []):\n","        detail_chart = company_chart_detail(esg_df,name, time_window,data_code,sasb_code,vertical_line)\n","    else:\n","        None\n","    \n","    general_chart.show()\n","    detail_chart.show()\n","    \n","def company_analysis(comp_name,name,start,end,event_term=120,vertical_line = False):\n","    start_year, start_month, start_day = [int(x) for x in start.split('-')]\n","    end_year, end_month, end_day = [int(x) for x in end.split('-')]\n","    from_ts, to_ts,from_ts_str1,to_ts_str1,from_ts_str2,to_ts_str2 = setTime(start_year, start_month, start_day, end_year, end_month, end_day)\n","    \n","    sasb_code,data_code,esg_df = call_esg_data(comp_name,from_ts,to_ts)\n","    stock_df = call_stock_data(comp_name,from_ts_str1,to_ts_str1)\n","    company_chart(stock_df,esg_df,name,event_term,data_code,sasb_code,vertical_line)\n","    \n","    return sasb_code,data_code,esg_df"]},{"cell_type":"code","execution_count":17,"id":"2a3702ae","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.226813Z","start_time":"2023-01-09T03:46:41.224216Z"}},"outputs":[],"source":["# 실행 코드\n","# sasb_code,data_code,esg_df = company_analysis('NAVER','2015-12-31','2022-11-17',120,False)"]},{"cell_type":"markdown","id":"eefcf561","metadata":{},"source":["## Company_Detail (Past)\n","- 지금 사용하기에는 너무 지저분함, 보수 후 사용 예정\n","- 정보량이 너무 많음"]},{"cell_type":"code","execution_count":18,"id":"78c47c2b","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.242202Z","start_time":"2023-01-09T03:46:41.229006Z"}},"outputs":[],"source":["def visualization(stock_data,esg_df,stock = False, pulse=False, score=True,rsi = False, detail = False):\n","    \n","    gics = [x[-3:] for x in esg_df.columns[esg_df.columns.str.contains('log_penalty')]]\n","    # Set X Axis\n","    x = pd.date_range(esg_df.date[0],esg_df.date[esg_df.shape[0]-1])\n","#     x = esg_df.date.values\n","    # Set subplot option\n","    fig = make_subplots(rows=5,cols=1,shared_xaxes=True,\n","                        specs = [[{\"secondary_y\": True, \"rowspan\":3}],\n","                                 [None],[None],\n","                                 [{\"rowspan\":2}],[None]])\n","    \n","    if stock == True:\n","        fig.add_trace(go.Scatter(x=stock_data.index, y=stock_data.종가,\n","                                mode='lines',name='종가'),\n","                      secondary_y=True,\n","                      row=1,col=1)\n","\n","    if pulse == True:    \n","        if sum(esg_df.columns.str.contains('data')) == 0:\n","            fig.add_trace(go.Scatter(x=x, y=esg_df['nfr_sasb_scaled_pulse'],\n","                                     mode='lines', name='NFR Pulse '), secondary_y=False,row=1,col=1)\n","        else: \n","            fig.add_trace(go.Scatter(x=x, y=esg_df['nfr_data_scaled_pulse'],\n","                                     mode='lines', name='NFR Pulse '), secondary_y=False, row=1,col=1)\n","            \n","        if detail == True:\n","            for code in gics:\n","                fig.add_trace(go.Scatter(x=x, y=esg_df[f'exp_scaled_{code}'],\n","                                         mode='lines', name=gic_map[int(code)]+' Exponential Scaled Pulse'),\n","                              secondary_y=False,row=1,col=1)\n","    if score == True:\n","        if sum(esg_df.columns.str.contains('data')) == 0:\n","            fig.add_trace(go.Scatter(x=x, y=esg_df['nfr_sasb_scaled_score'],\n","                                     mode='lines', name='NFR Score'), secondary_y=False,row=1,col=1)\n","        else: \n","            fig.add_trace(go.Scatter(x=x, y=esg_df['nfr_data_scaled_score'],\n","                                     mode='lines', name='NFR Score'), secondary_y=False,row=1,col=1)     \n","\n","        if detail == True:\n","            for code in gics:\n","                fig.add_trace(go.Scatter(x=x, y=esg_df[f'risk_score_{code}'],\n","                                         mode='lines', name=gic_map[int(code)]+' Risk Score'),\n","                              secondary_y=False,row=1,col=1)\n","\n","    if rsi == True:\n","        if sum(esg_df.columns.str.contains('data')) == 0:\n","            fig.add_trace(go.Scatter(x=x, y=esg_df['nfr_sasb_scaled_score_rsi'],\n","                                         mode='lines', name='NFR Score RSI'), row=4,col=1)\n","        else: \n","            fig.add_trace(go.Scatter(x=x, y=esg_df['nfr_data_scaled_score_rsi'],\n","                                         mode='lines', name='NFR Score RSI'), row=4,col=1)\n","\n","        if detail == True:\n","            for code in gics:\n","                fig.add_trace(go.Scatter(x=x, y=esg_df[f'score_rsi_{code}'],\n","                                         mode='lines', name=gic_map[int(code)]+' RSI'),\n","                              row=4,col=1)\n","\n","        \n","    fig.add_hline(y= 30,annotation_text = 'Low Momentum',line_color = 'blue',annotation_font_size=10, annotation_font_color=\"blue\",annotation_position = 'bottom left',row=4,col=1)\n","    fig.add_hline(y= 70,annotation_text = 'High Momentum',line_color = 'red',annotation_font_size=10, annotation_font_color=\"red\",annotation_position = 'bottom left',row=4,col=1)\n","    fig.update_layout(title = f'{esg_df.corp_code.unique()} : {company_data[company_data.corp_code == esg_df.corp_code.unique()[0]].corp_name.values[0]}')\n","    fig.update_layout(hovermode = 'x unified')\n","    fig.update_yaxes(title_text=\"<b>ESG Risk Index</b>\", secondary_y=False,row=1,col=1)\n","    fig.update_yaxes(title_text=\"<b>Stock Price</b>\", secondary_y=True,row=1,col=1)\n","    fig.update_yaxes(range=[0,100],title_text=\"<b>RSI<b>\",row=4,col=1)\n","    fig.update_xaxes(title_text=\"Date\",row=4,col=1)\n","\n","    fig.show()   \n","    "]},{"cell_type":"markdown","id":"88068079","metadata":{},"source":["# Industry Analysis (ESG Exposure)"]},{"cell_type":"code","execution_count":19,"id":"bcf9753c","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.247160Z","start_time":"2023-01-09T03:46:41.244019Z"}},"outputs":[],"source":["def get_esg_exposure_df(comp_name, from_, to_):\n","    \n","    corp_code = corp_map[comp_name]['corp_code']\n","    result = pd.DataFrame(get_esg_exposure(corp_code, from_, to_)).pivot(index = 'general_issue_code',columns = 'date').T\n","    result.columns  = ['esg_exposure_' + str(x) for x in result.columns.tolist()]\n","    result = result.reset_index().drop('level_0',axis=1)\n","    result.date  = pd.to_datetime(result.date)\n","    return result"]},{"cell_type":"code","execution_count":20,"id":"75a0c409","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.253464Z","start_time":"2023-01-09T03:46:41.248993Z"}},"outputs":[],"source":["def within_industry_dict(sasb_industry_name, from_ts, to_ts, from_ts_str2, to_ts_str2):\n","    industry_dict={}\n","    for comp_name in industry_dic[sasb_industry_name]:\n","        sasb_code,data_code,esg_df = call_esg_data(comp_name,from_ts,to_ts,industry = True)\n","        if (sasb_code == ['']) & (data_code == ['']):\n","            pass\n","        else:\n","            esg_exposure = get_esg_exposure_df(comp_name, from_ts_str2, to_ts_str2)\n","            esg_df = pd.merge(esg_df,esg_exposure, how = 'outer', on= 'date')\n","            industry_dict[comp_name] = {}\n","            industry_dict[comp_name]['sasb_code'] = sasb_code\n","            industry_dict[comp_name]['data_code'] = data_code\n","            industry_dict[comp_name]['esg_df'] = esg_df\n","    return industry_dict \n","\n","def within_industry_data(industry_dict):\n","    super_x = []\n","    for k in industry_dict.keys():\n","        super_x.append(industry_dict[k]['esg_df'])\n","    try:\n","        industry_data = pd.concat(super_x)\n","        return industry_data\n","    except:\n","        pass"]},{"cell_type":"code","execution_count":21,"id":"6943a511","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.261365Z","start_time":"2023-01-09T03:46:41.255147Z"}},"outputs":[],"source":["def within_industry_exposure(industry_data,industry_dict):\n","    data_code = []\n","    sasb_code = []\n","    for k in industry_dict.keys():\n","        data_code.extend(industry_dict[k]['data_code'])\n","        sasb_code.extend(industry_dict[k]['sasb_code'])\n","    data_code = list(set(data_code))\n","    sasb_code = list(set(sasb_code))\n","    \n","    if '' in data_code:\n","        data_code.remove('')\n","    if '' in sasb_code:\n","        sasb_code.remove('')\n","    \n","    super_data = []\n","    super_sasb = []\n","    for i in data_code:\n","        super_data.append(industry_data[f'esg_exposure_{i}'])\n","    for i in sasb_code:\n","        super_sasb.append(industry_data[f'esg_exposure_{i}'])\n","\n","    data_driven = pd.concat(super_data,axis=1).T.sum(axis=1).reset_index(name = 'esg_exposure(%)')\n","    data_driven['esg_exposure(%)'] = round(data_driven['esg_exposure(%)']*100/data_driven['esg_exposure(%)'].sum(),2)\n","    data_driven['index'] = [gic_map[int(x[-3:])] for x in data_driven['index']]\n","    data_driven.sort_values(by = 'esg_exposure(%)',ascending= False,inplace=True)\n","    data_driven = data_driven.head(10).reset_index(drop=True)\n","\n","    sasb_driven = pd.concat(super_sasb,axis=1).T.sum(axis=1).reset_index(name = 'esg_exposure(%)')\n","    sasb_driven['esg_exposure(%)'] = round(sasb_driven['esg_exposure(%)']*100/sasb_driven['esg_exposure(%)'].sum(),2)\n","    sasb_driven['index'] = [gic_map[int(x[-3:])] for x in sasb_driven['index']]\n","    sasb_driven.sort_values(by = 'esg_exposure(%)',ascending= False,inplace=True)\n","    sasb_driven = sasb_driven.head(10).reset_index(drop=True)\n","    return data_driven, sasb_driven"]},{"cell_type":"code","execution_count":22,"id":"78d39952","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.268726Z","start_time":"2023-01-09T03:46:41.262817Z"}},"outputs":[],"source":["def between_industry_exposure(sasb_industry_name1,sasb_industry_name2, start, end):\n","    \n","    start_year, start_month, start_day = [int(x) for x in start.split('-')]\n","    end_year, end_month, end_day = [int(x) for x in end.split('-')]\n","    from_ts, to_ts,from_ts_str1,to_ts_str1,from_ts_str2,to_ts_str2 = setTime(start_year, start_month, start_day, end_year, end_month, end_day) \n","    \n","    ind1_dict = within_industry_dict(sasb_industry_name1, from_ts, to_ts, from_ts_str2, to_ts_str2)\n","    ind2_dict = within_industry_dict(sasb_industry_name2, from_ts, to_ts, from_ts_str2, to_ts_str2)\n","\n","    ind1_data = within_industry_data(ind1_dict)\n","    ind2_data = within_industry_data(ind2_dict)\n","    \n","    ind1_data_drv, ind1_sasb_drv = within_industry_exposure(ind1_data,ind1_dict)\n","    ind1_data_drv.columns = [sasb_industry_name1,f'{sasb_industry_name1}_esg_exposure(%)']\n","    ind1_sasb_drv.columns = [sasb_industry_name1,f'{sasb_industry_name1}_esg_exposure(%)']\n","    \n","    ind2_data_drv,ind2_sasb_drv = within_industry_exposure(ind2_data,ind2_dict)\n","    ind2_data_drv.columns = [sasb_industry_name2,f'{sasb_industry_name2}_esg_exposure(%)']\n","    ind2_sasb_drv.columns = [sasb_industry_name2,f'{sasb_industry_name2}_esg_exposure(%)']\n","    \n","    ind_compare_data = pd.concat([ind1_data_drv,ind2_data_drv],axis=1)\n","    ind_compare_sasb = pd.concat([ind1_sasb_drv,ind2_sasb_drv],axis=1)\n","    \n","    display(ind_compare_data.style.bar(color='mistyrose',vmax=50).set_precision(2))\n","    display(ind_compare_sasb.style.bar(vmax=100,color = 'lavender').set_precision(2))\n","    \n","    return ind_compare_data, ind_compare_sasb"]},{"cell_type":"code","execution_count":23,"id":"28a60228","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.272413Z","start_time":"2023-01-09T03:46:41.270377Z"}},"outputs":[],"source":["# 실행 코드\n","# ind_compare_data,ind_compare_sasb = between_industry_exposure('Airlines','Automobiles','2015-12-31','2022-11-17')"]},{"cell_type":"code","execution_count":24,"id":"ba159dd5","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.296474Z","start_time":"2023-01-09T03:46:41.280089Z"}},"outputs":[],"source":["# indsec_dict = {Sector : [Indsutries]}\n","ind_sec = company_data.loc[:, ['SICS Codified Industry', 'Codified SICS Sector']]\n","ind_sec.drop_duplicates(inplace=True)\n","ind_sec = ind_sec.sort_values('Codified SICS Sector')\n","\n","indsec_dict ={}\n","\n","\n","for i in range(len(set(ind_sec['Codified SICS Sector']))):\n","    sector = list(set(ind_sec['Codified SICS Sector']))[i]\n","    indsec_dict[sector] = list(ind_sec[ind_sec['Codified SICS Sector'] == sector]['SICS Codified Industry'])\n","    \n","\n","# 한 Sector내 모든 Industries의 esg_exposure 비교\n","def between_industry_exposure_total(sector, start, end):\n","    \n","    start_year, start_month, start_day = [int(x) for x in start.split('-')]\n","    end_year, end_month, end_day = [int(x) for x in end.split('-')]\n","    from_ts, to_ts,from_ts_str1,to_ts_str1,from_ts_str2,to_ts_str2 = setTime(start_year, start_month, start_day, end_year, end_month, end_day) \n","    \n","    ind_compare_data=pd.DataFrame()\n","    ind_compare_sasb=pd.DataFrame()\n","    \n","    for i in range(len(indsec_dict[sector])):\n","        ind_dict={}\n","        try :\n","            ind_dict = within_industry_dict(indsec_dict[sector][i], from_ts, to_ts, from_ts_str2, to_ts_str2)\n","            if ind_dict != {}: \n","                ind_data = within_industry_data(ind_dict)\n","\n","                ind_data_drv, ind_sasb_drv = within_industry_exposure(ind_data, ind_dict)\n","                ind_data_drv.columns = [indsec_dict[sector][i],f'{indsec_dict[sector][i]}_esg_exposure(%)']\n","                ind_sasb_drv.columns = [indsec_dict[sector][i],f'{indsec_dict[sector][i]}_esg_exposure(%)']\n","\n","                ind_compare_data = pd.concat([ind_compare_data, ind_data_drv],axis=1)\n","                ind_compare_sasb = pd.concat([ind_compare_sasb, ind_sasb_drv],axis=1)\n","            else :\n","                print(f\"There is no any data in 'esg_exposure' or 'esg_pulse' for [{indsec_dict[sector][i]}] industry\")\n","        except :\n","            pass\n","\n","    #display(ind_compare_data.style.bar(color='mistyrose',vmax=50).set_precision(2))\n","    display(ind_compare_sasb.style.bar(vmax=100,color = 'lavender').set_precision(2))\n","    \n","    return ind_compare_data, ind_compare_sasb\n","\n","\n","# 사용 예시\n","# indsec_dict['Food & Beverage']\n","# ind_compare_data, ind_compare_sasb = between_industry_exposure_total('Renewable Resources & Alternative Energy', '2017-01-01', '2022-12-27')"]},{"cell_type":"code","execution_count":25,"id":"f207deae","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.302175Z","start_time":"2023-01-09T03:46:41.298064Z"}},"outputs":[],"source":["# 수집된 데이터(kospi 200) 중 call_esg_data에 data가 있는 company만 추출\n","# setTime(start_year=2021, start_month=10, start_day=31, end_year=2022, end_month=11, end_day=30)\n","\n","def real_company_ls(sector):\n","    industry_ls = indsec_dict[sector]\n","    comparable_company = []\n","\n","    for i in range(len(industry_ls)):\n","        company_ls = []    \n","        real_company_ls = []\n","        company_ls = list(company_data[(company_data['SICS Codified Industry'] == industry_ls[i]) & (company_data['corp_cls'] == 'Y')]['stock_name'])\n","\n","        for j in range(len(company_ls)):\n","            sasb_code, data_cod, esg_df = call_esg_data(company_ls[j], from_ts, to_ts,industry = False,scaled=1,data_top=10)\n","            if len(esg_df) != 0:\n","                real_company_ls.append(company_ls[j])\n","        comparable_company.append(real_company_ls)\n","        print(f'{industry_ls[i]} : {real_company_ls}, 총 {len(real_company_ls)}개')\n","    return comparable_company"]},{"cell_type":"code","execution_count":26,"id":"1f9c9d73","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.306014Z","start_time":"2023-01-09T03:46:41.303642Z"}},"outputs":[],"source":["# real_company_s(sector) 사용예시\n","\n","# start='2017-01-01'\n","# end='2022-11-30'\n","# start_year, start_month, start_day = [int(x) for x in start.split('-')]\n","# end_year, end_month, end_day = [int(x) for x in end.split('-')]\n","# from_ts, to_ts,from_ts_str1,to_ts_str1,from_ts_str2,to_ts_str2 = setTime(start_year, start_month, start_day, end_year, end_month, end_day)\n","# from_ts, to_ts, from_ts_str2, to_ts_str2\n","\n","# comparable_company = real_company_ls('Food & Beverage')"]},{"cell_type":"markdown","id":"3ff29d6d","metadata":{},"source":["## Industry Analysis (Time series)"]},{"cell_type":"code","execution_count":27,"id":"6779be3d","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.310974Z","start_time":"2023-01-09T03:46:41.307475Z"}},"outputs":[],"source":["def industry_yearly_data(industry_data):\n","    industry_data['year_exposure'] = industry_data['date'].dt.year    \n","    col_lst = industry_data.columns[industry_data.columns.str.contains('exposure')].tolist()\n","    industry_y_data = industry_data[col_lst].groupby('year_exposure').sum()\n","    industry_y_data.index.rename('year',inplace= True)\n","    yearly_sum = industry_y_data.sum(axis=1)\n","    for i in col_lst[:-1]:\n","        industry_y_data[f'{i}_ratio'] = round(industry_y_data[i]/yearly_sum *100,2)\n","    return industry_y_data"]},{"cell_type":"code","execution_count":28,"id":"73bc4e6a","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.324579Z","start_time":"2023-01-09T03:46:41.312916Z"}},"outputs":[],"source":["def industry_yearly_chart(industry_y_data,industry_name,top5=True):\n","    '''\n","    industry_y_data: industry_yearly_data 함수 결과물\n","    '''\n","\n","    if top5 == True:\n","        cnt_lst = industry_y_data[industry_y_data.columns[~industry_y_data.columns.str.contains('ratio')]].T.sort_values(by=2022,ascending = False).head().index.tolist()\n","        ratio_lst = [f'{x}_ratio'for x in cnt_lst]\n","        visible_options = []\n","        visible_option = [False for x in range(len(cnt_lst))]\n","    else:\n","        cnt_lst = industry_y_data.columns[~industry_y_data.columns.str.contains('ratio')]\n","        ratio_lst = industry_y_data.columns[industry_y_data.columns.str.contains('ratio')]\n","        visible_options = []\n","        visible_option = [False for x in range(len(cnt_lst))]\n","    x = industry_y_data.index\n","\n","    fig = go.Figure()\n","    fig = make_subplots(rows=5,cols=1,shared_xaxes=True,\n","                        specs = [[{\"rowspan\":3}],\n","                                 [None],[None],\n","                                 [{\"rowspan\":2}],[None]])\n","\n","    ## Main Line Chary (Upper part)\n","    for i in range(len(ratio_lst)):\n","        fig.add_trace(go.Scatter(x=x, y=industry_y_data[ratio_lst[i]],\n","                                 name=gic_map[int(ratio_lst[i][-9:-6])]),\n","                      row=1,col=1)\n","        new = visible_option.copy()\n","        new[i]=True\n","        visible_options.append(new)\n","\n","    ## Sub Bar Plot (Lower part)\n","    for code in cnt_lst:\n","        fig.add_trace(go.Bar(x=x, y=industry_y_data[code],\n","                             name=gic_map[int(code[-3:])]),\n","                      row=4,col=1)\n","\n","        \n","    buttons_lst= [dict(label = \"All\",\n","                       method = \"update\",\n","                       args = [{\"visible\": [True for x in visible_option] + [True for x in visible_option]},\n","                               {\"title\": dict(text = f\"<b>{industry_name} Industry<br>Yearly ESG Exposure<b>\",\n","                                             )}])]\n","    for i in range(len(visible_options)):\n","        comp = dict(label = gic_map[int(ratio_lst[i][-9:-6])],\n","                    method = \"update\",\n","                    args = [{\"visible\": visible_options[i]+visible_options[i]},\n","                            {\"title\": dict(text = f\"<b>{gic_map[int(ratio_lst[i][-9:-6])]}<br>Yearly ESG Exposure Ratio<b>\",\n","                                          )}])\n","        buttons_lst.append(comp)\n","        \n","    # Chart Design depending top5 condition \n","    if top5 == True:\n","        fig.update_layout(\n","            updatemenus=[\n","                dict(\n","                    active=0,\n","                    buttons = buttons_lst,\n","                    font = dict(size=9),\n","                    showactive = True,\n","                    yanchor=\"bottom\",\n","                    xanchor = 'right',\n","                    x=1,\n","                    y=1.08,                    \n","                )\n","            ])\n","        fig.update_layout(title_text = f'<b>{industry_name} Industry<br>Yearly ESG Exposure<b>',hovermode = 'closest',\n","                          template=\"plotly_white\",font = dict(size=8),\n","                          legend = dict(orientation=\"h\",yanchor= 'top',y=-0.15,font_size=9))    \n","    else:       \n","        fig.update_layout(\n","            updatemenus=[\n","                dict(\n","                    active=0,\n","                    buttons = buttons_lst,\n","                    showactive = True,\n","                    xanchor=\"right\",\n","                    x= - 0.4,\n","                    font = dict(size=9),\n","                )\n","            ])\n","        fig.update_layout(title_text = f'<b><{industry_name} Industry ESG Exposure><b>',\n","                          template=\"plotly_white\",hovermode = 'closest',font = dict(size=8),\n","                          legend = dict(xanchor= 'right',yanchor='top', x = -0.4, y=0.85,font_size=9)\n","                         )\n","    \n","    fig.update_yaxes(title_text=\"<b>ESG Exposure Ratio (%)</b>\",secondary_y=False,row=1,col=1)\n","    fig.update_yaxes(title_text=\"<b>ESG Exposure<b>\",row=4,col=1)\n","    fig.update_xaxes(title_text=\"<b>Year<b>\",row=4,col=1)\n","    \n","    return fig"]},{"cell_type":"code","execution_count":29,"id":"055c7930","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.330292Z","start_time":"2023-01-09T03:46:41.326085Z"}},"outputs":[],"source":["def industry_yearly_analysis(industry_name,start,end,top5=True):\n","    \n","    start_year, start_month, start_day = [int(x) for x in start.split('-')]\n","    end_year, end_month, end_day = [int(x) for x in end.split('-')]\n","    from_ts, to_ts,from_ts_str1,to_ts_str1,from_ts_str2,to_ts_str2 = setTime(start_year, start_month, start_day, end_year, end_month, end_day) \n","    \n","    industry_dict = within_industry_dict(industry_name, from_ts, to_ts, from_ts_str2, to_ts_str2)\n","    industry_data = within_industry_data(industry_dict)\n","    industry_y_data = industry_yearly_data(industry_data)\n","    viz = industry_yearly_chart(industry_y_data,industry_name,top5)\n","    viz.show()"]},{"cell_type":"code","execution_count":30,"id":"37c93d39","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.334164Z","start_time":"2023-01-09T03:46:41.332005Z"},"scrolled":true},"outputs":[],"source":["# 실행코드\n","# industry_yearly_analysis('Processed Foods','2016-01-01','2022-11-17',top5 = True)"]},{"cell_type":"markdown","id":"77d96be7","metadata":{},"source":["## Industry Analysis base on the specific SASB tag (Time series)"]},{"cell_type":"code","execution_count":31,"id":"64813933","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.340256Z","start_time":"2023-01-09T03:46:41.335906Z"}},"outputs":[],"source":["## 산업군 기준 yearly 데이터 한번에 수집하는 함수, 20160101~20221117까지 40분 소요\n","def collect_industry_bulk(industry_lst,start,end):\n","    start_year, start_month, start_day = [int(x) for x in start.split('-')]\n","    end_year, end_month, end_day = [int(x) for x in end.split('-')]\n","    from_ts, to_ts,from_ts_str1,to_ts_str1,from_ts_str2,to_ts_str2 = setTime(start_year, start_month, start_day, end_year, end_month, end_day) \n","    \n","    super_x = []\n","    for industry_name in tqdm(industry_lst):\n","        industry_dict = within_industry_dict(industry_name, from_ts, to_ts, from_ts_str2, to_ts_str2)\n","        industry_data = within_industry_data(industry_dict)\n","        try:\n","            industry_y_data = industry_yearly_data(industry_data)\n","            industry_y_data['industry'] = industry_name\n","            super_x.append(industry_y_data)\n","\n","        except:\n","            pass\n","    try:\n","        bulk_data = pd.concat(super_x,axis=0)\n","        return bulk_data\n","    except:\n","        pass\n","        \n","        \n","    "]},{"cell_type":"code","execution_count":32,"id":"3932e2d8","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.352075Z","start_time":"2023-01-09T03:46:41.341948Z"}},"outputs":[],"source":["def industry_yearly_category_chart(industry_tag_data,sasb_category_name,top5=True):\n","    visible_options = []\n","    if top5 == True:\n","        ind_lst = industry_tag_data.loc[2022].sort_values(by='ratio',ascending = False).head().industry.tolist()\n","        visible_option = [False for x in range(len(ind_lst))]\n","    else:\n","        ind_lst = industry_tag_data.industry.unique()\n","        visible_option = [False for x in range(len(ind_lst))]\n","    x = industry_tag_data.index.unique()\n","\n","    fig = go.Figure()\n","    fig = make_subplots(rows=5,cols=1,shared_xaxes=True,\n","                        specs = [[{\"rowspan\":3}],\n","                                 [None],[None],\n","                                 [{\"rowspan\":2}],[None]])\n","\n","    ## Main Line Chary (Upper part)\n","    for i in range(len(ind_lst)):\n","        fig.add_trace(go.Scatter(x=industry_tag_data[industry_tag_data.industry == ind_lst[i]].index,\n","                                 y=industry_tag_data[industry_tag_data.industry == ind_lst[i]]['ratio'],\n","                                 name=ind_lst[i]),\n","                      row=1,col=1)\n","        new = visible_option.copy()\n","        new[i]=True\n","        visible_options.append(new)\n","\n","    ## Sub Bar Plot (Lower part)\n","    for i in range(len(ind_lst)):\n","        fig.add_trace(go.Bar(x=industry_tag_data[industry_tag_data.industry == ind_lst[i]].index,\n","                             y=industry_tag_data[industry_tag_data.industry == ind_lst[i]]['cnt'],\n","                             name=ind_lst[i]),\n","                      row=4,col=1)\n","\n","\n","    buttons_lst= [dict(label = \"All\",\n","                       method = \"update\",\n","                       args = [{\"visible\": [True for x in visible_option] + [True for x in visible_option]},\n","                               {\"title\": dict(text = f\"<b>{sasb_category_name}<br>Yearly ESG Exposure<b>\",\n","                                             )}])]\n","    for i in range(len(visible_options)):\n","        comp = dict(label = ind_lst[i],\n","                    method = \"update\",\n","                    args = [{\"visible\": visible_options[i]+visible_options[i]},\n","                            {\"title\": dict(text = f\"<b>{ind_lst[i]} : {sasb_category_name}<br>Yearly ESG Exposure Ratio<b>\",\n","                                          )}])\n","        buttons_lst.append(comp)\n","    # Chart Design depending top5 condition \n","    if top5 == True:\n","        fig.update_layout(\n","            updatemenus=[\n","                dict(\n","                    active=0,\n","                    buttons = buttons_lst,\n","                    font = dict(size=9),\n","                    yanchor=\"bottom\",\n","                    xanchor = 'right',\n","                    x=1,\n","                    y=1.08,                    \n","                )\n","            ])\n","        fig.update_layout(title_text = f\"<b>{sasb_category_name}<br>Yearly ESG Exposure<b>\",hovermode = 'closest',\n","                          template=\"plotly_white\",font = dict(size=8),\n","                          legend = dict(orientation=\"h\",yanchor= 'top',y=-0.15,font_size=9))    \n","    else:       \n","        fig.update_layout(\n","            updatemenus=[\n","                dict(\n","                    active=0,\n","                    buttons = buttons_lst,\n","                    xanchor=\"right\",\n","                    x= - 0.4,\n","                    font = dict(size=9),\n","                )\n","            ])\n","        fig.update_layout(title_text = f\"<b>{sasb_category_name}<br>Yearly ESG Exposure<b>\",\n","                          template=\"plotly_white\",hovermode = 'closest',font = dict(size=8),\n","                          legend = dict(xanchor= 'right',yanchor='top', x = -0.4, y=0.85,font_size=9)\n","                         )\n","\n","    fig.update_yaxes(title_text=\"<b>ESG Exposure Ratio (%)</b>\",secondary_y=False,row=1,col=1)\n","    fig.update_yaxes(title_text=\"<b>ESG Exposure<b>\",row=4,col=1)\n","    fig.update_xaxes(title_text=\"<b>Year<b>\",row=4,col=1)  \n","\n","    return fig"]},{"cell_type":"code","execution_count":33,"id":"9aece3f1","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.357840Z","start_time":"2023-01-09T03:46:41.353995Z"}},"outputs":[],"source":["def extract_tag_industry(bulk_data, sasb_category_name,top5=True):\n","    code = code_map[sasb_category_name]\n","    temp = bulk_data[bulk_data.columns[bulk_data.columns.str.contains(str(code))]].copy()\n","    temp['industry'] = bulk_data['industry']\n","    temp.columns = ['cnt','ratio','industry']\n","    temp.reset_index(inplace = True)\n","    category_yearly_sum = temp.groupby('year').sum()['cnt'].reset_index(name = 'sum')\n","    industry_tag_data = pd.merge(temp,category_yearly_sum,on = 'year')\n","    industry_tag_data['ratio'] = round(industry_tag_data['cnt']/industry_tag_data['sum']*100,2)\n","    industry_tag_data.set_index('year',inplace=True)\n","    \n","    viz = industry_yearly_category_chart(industry_tag_data,sasb_category_name,top5)\n","    viz.show()\n","    return industry_tag_data"]},{"cell_type":"code","execution_count":34,"id":"b408bd97","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.390649Z","start_time":"2023-01-09T03:46:41.359124Z"}},"outputs":[{"ename":"NameError","evalue":"name 'bulk_data' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn [34], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# 실행코드\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m industry_tag_data \u001b[38;5;241m=\u001b[39m extract_tag_industry(\u001b[43mbulk_data\u001b[49m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mSupply Chain Management\u001b[39m\u001b[38;5;124m'\u001b[39m,top5\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n","\u001b[0;31mNameError\u001b[0m: name 'bulk_data' is not defined"]}],"source":["# 실행코드\n","industry_tag_data = extract_tag_industry(bulk_data, 'Supply Chain Management',top5=True)"]},{"cell_type":"markdown","id":"118c3059","metadata":{},"source":["# Industry Analysis (Within Industry)"]},{"cell_type":"code","execution_count":null,"id":"a539fbb4","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.402117Z","start_time":"2023-01-09T03:46:41.402105Z"}},"outputs":[],"source":["def within_industry_chart(industry_name,industry_data):\n","    fig = go.Figure()\n","    x=pd.date_range(industry_data.date.min(),industry_data.date.max())\n","    corp_code_lst = industry_data.corp_code.dropna(axis=0).unique()\n","    visible_options = []\n","    visible_sub1 = [True for x in corp_code_lst]\n","    visible_sub2 = [False for x in corp_code_lst]\n","    for m in ['data','sasb']:\n","        for s in ['score','pulse']:\n","            col_name = f'nfr_{m}_scaled_{s}'\n","            for corp_code in corp_code_lst:\n","                temp = industry_data[industry_data.corp_code == corp_code]\n","                if (m == 'data') & (s == 'score'):\n","                    fig.add_trace(go.Scatter(x=x, y=temp[col_name],\n","                                             mode='lines', name=f\"{corp_code}\"))\n","                else:\n","                    fig.add_trace(go.Scatter(x=x, y=temp[col_name],\n","                                             mode='lines', name=f\"{corp_code}\",\n","                                             visible = False))\n","    fig.update_layout(\n","        updatemenus=[\n","            dict(\n","                type='buttons',\n","                active=0,\n","                buttons=list([\n","                    dict(label=\"Data NFR Score\",\n","                         method=\"update\",\n","                         args=[{\"visible\": visible_sub1 + visible_sub2*3},\n","                               {\"title\": f'<b>{industry_name}<br>Data Driven Materiality NFR Score<b>',\n","                                \"annotations\":[]}]),\n","                    dict(label=\"Data NFR Pulse\",\n","                         method=\"update\",\n","                         args=[{\"visible\": visible_sub2 + visible_sub1 + visible_sub2*2},\n","                               {\"title\": f\"<b>{industry_name}<br>Data Driven Materiality NFR Pulse<b>\",\n","                                \"annotations\": []}]),\n","                    dict(label=\"SASB NFR Score\",\n","                         method=\"update\",\n","                         args=[{\"visible\": visible_sub2*2 + visible_sub1 + visible_sub2},\n","                               {\"title\": f\"<b>{industry_name}<br>SASB Driven Materiality NFR Score<b>\",\n","                                \"annotations\": []}]),\n","                    dict(label=\"SASB NFR Pulse\",\n","                         method=\"update\",\n","                         args=[{\"visible\":  visible_sub2*3 + visible_sub1},\n","                               {\"title\": f\"<b>{industry_name}<br>SASB Driven Materiality NFR Pulse<b>\",\n","                                \"annotations\":[]}])\n","                ]),\n","                \n","                font = dict(size=9),\n","                yanchor=\"bottom\",\n","                xanchor = 'right',\n","                direction = 'left',\n","                x=1,\n","                y=1.08,    \n","                \n","            )\n","        ])\n","            \n","            \n","            \n","            \n","    fig.update_layout(title = f'{m.upper()} Driven Materiality NFR Score',\n","                     template=\"plotly_white\",hovermode = 'x unified',font = dict(size=10),\n","                      legend = dict(orientation=\"h\",yanchor= 'top',y=-0.15,font_size=9))\n","\n","    fig.update_xaxes(title_text=\"Date\")\n","    fig.update_yaxes(title_text=\"<b>ESG Risk Index</b>\")\n","\n","    return fig"]},{"cell_type":"code","execution_count":null,"id":"2455367e","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.403713Z","start_time":"2023-01-09T03:46:41.403697Z"}},"outputs":[],"source":["def industry_yearly_analysis(industry_name,start,end,top5=True):\n","    \n","    start_year, start_month, start_day = [int(x) for x in start.split('-')]\n","    end_year, end_month, end_day = [int(x) for x in end.split('-')]\n","    from_ts, to_ts,from_ts_str1,to_ts_str1,from_ts_str2,to_ts_str2 = setTime(start_year, start_month, start_day, end_year, end_month, end_day) \n","    \n","    industry_dict = within_industry_dict(industry_name, from_ts, to_ts, from_ts_str2, to_ts_str2)\n","    industry_data = within_industry_data(industry_dict)\n","    viz = within_industry_chart(industry_name,industry_data)\n","    viz.show()\n","    return industry_data"]},{"cell_type":"code","execution_count":null,"id":"4456df31","metadata":{},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"id":"8cb685cc","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.405090Z","start_time":"2023-01-09T03:46:41.405075Z"}},"outputs":[],"source":["# industry_yearly_analysis('Hardware','2016-01-01','2022-11-21')"]},{"cell_type":"markdown","id":"e79f0f11","metadata":{},"source":["\n","# Industry Analysis (Past)\n"]},{"cell_type":"code","execution_count":null,"id":"cbf611db","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.405945Z","start_time":"2023-01-09T03:46:41.405934Z"}},"outputs":[],"source":["# Company stock, nfr_score, ESG Tag names list\n","def compare_ind(sasb_industry_name,materiality = 'data'):\n","    if materiality == 'data':\n","        col_name = 'nfr_data_scaled_score'\n","    elif materiality == 'sasb':\n","        col_name = 'nfr_sasb_scaled_score'\n","    temp = {}\n","    remove_lst = []\n","    from_ts, to_ts, from_ts_str, to_ts_str = setTime(2016, 1, 1, 2022, 6, 30)\n","    for name in industry_dic[sasb_industry_name]:\n","        print(f'Collecting {name} Data')\n","        temp[name] = {}\n","        temp[name]['result'] = call_data(name,from_ts,to_ts,materiality=materiality)\n","        temp[name]['label']  = [x[-3:] for x in temp[name]['result'].columns[temp[name]['result'].columns.str.contains('log_penalty')]]\n","        print('*'*20)\n","        \n","    x=pd.date_range(from_ts_str,to_ts_str)\n","    fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n","    for k in temp.keys():\n","        if temp[k]['result'].empty:\n","            remove_lst.append(k)\n","\n","        else:\n","            fig.add_trace(go.Scatter(x=x, y=temp[k]['result'][col_name],\n","                                             mode='lines', name=f\"{k} NFR SCORE\"),\n","                                  secondary_y=True)\n","    \n","    \n","    for k in remove_lst:\n","        del temp[k]\n","        \n","    fig.update_layout(title = f'{sasb_industry_name}')\n","    fig.update_xaxes(title_text=\"Date\")\n","    fig.update_yaxes(title_text=\"<b>ESG Risk Index</b>\")\n","    fig.show()\n","    \n","    return temp\n","    "]},{"cell_type":"code","execution_count":null,"id":"19284dd0","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.407264Z","start_time":"2023-01-09T03:46:41.407251Z"}},"outputs":[],"source":["# DataFrame Columns:['nfr_score','nfr_pulse','comp_name']\n","def analysis_data(dic,from_ts_str,to_ts_str,materiality = 'data'):\n","    lst = dic.keys()\n","    super_x = []\n","    for k in lst:\n","        temp = dic[k]['result'][['date','corp_code_str',f'nfr_{materiality}_scaled_score',f'nfr_{materiality}_scaled_pulse']]\n","        temp['comp_name'] = k\n","        temp = temp[(temp.date >= from_ts_str)&(temp.date <= to_ts_str)]\n","        super_x.append(temp)\n","    \n","    result = pd.concat(super_x)\n","    return result\n","        "]},{"cell_type":"markdown","id":"f87a07e4","metadata":{},"source":["## Statistic Analysis"]},{"cell_type":"code","execution_count":null,"id":"e4fc461d","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.408653Z","start_time":"2023-01-09T03:46:41.408640Z"}},"outputs":[],"source":["# General\n","import statsmodels.api as sm\n","from scipy import stats\n","\n","# Visualization\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","#경고무시\n","import warnings\n","warnings.filterwarnings(action='ignore')\n","plt.rcParams['font.family'] = 'AppleGothic' # 폰트 지정\n","plt.rc('axes', unicode_minus=False) # 마이너스 폰트 설정\n","%config InlineBackend.figure_format='retina' # 그래프 글씨 뚜렷\n","\n","\n","# Post-hoc Analysis\n","import scikit_posthocs as sp\n","from statsmodels.formula.api import ols\n","from statsmodels.stats.anova import anova_lm\n","from statsmodels.stats.multicomp import pairwise_tukeyhsd\n","\n"]},{"cell_type":"code","execution_count":null,"id":"dbe840e1","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.409762Z","start_time":"2023-01-09T03:46:41.409750Z"}},"outputs":[],"source":["# # 새롭게 수정된 버전\n","# def industry_analysis_pulse(analysis_data):\n","#     #산업군 내 비교를 위한 산업평균 데이터 추가\n","#     avg = analysis_data.groupby('date').mean()\n","#     avg['comp_name'] = '산업평균'\n","    \n","#     analysis_data = pd.concat([analysis_data,avg])\n","#     #산업군 내 평균 비교를 위한 순위 생성\n","#     ranking = pd.DataFrame(analysis_data.groupby('comp_name').median().nfr_pulse_scaled).sort_values(by = 'nfr_pulse_scaled',ascending=False)\n","#     ranking['compare_ratio'] = round(100 * (ranking['nfr_pulse_scaled'] - ranking.loc['산업평균','nfr_pulse_scaled']) / ranking.loc['산업평균','nfr_pulse_scaled'],2)\n","#     ranking.drop('산업평균',axis=0,inplace= True)\n","#     ranking['rank'] = ranking.nfr_pulse_scaled.rank(axis = 0,method='max',ascending=False)\n","#     ranking['pct'] = round(100 * ranking['rank'] / ranking.shape[0],2)\n"," \n","    \n","#     # NFR Score Distribution for each companies\n","#     comp_lst = analysis_data.comp_name.unique()\n","#     plt.figure(figsize = (20,7))\n","#     for k in range(len(comp_lst)):\n","#         sns.kdeplot(data = analysis_data[analysis_data.comp_name == comp_lst[k]].nfr_pulse_scaled,shade=True,label=comp_lst[k])\n","#         plt.axvline(x = np.percentile(analysis_data[analysis_data.comp_name == comp_lst[k]].nfr_pulse_scaled,50),linewidth = 1,ls = '--',color='blue')\n","#         plt.text(np.percentile(analysis_data[analysis_data.comp_name == comp_lst[k]].nfr_pulse_scaled,50)+0.1,np.random.uniform(0,0.05),f'{comp_lst[k]}',color='black')\n","#     plt.legend()\n","#     plt.title('NFR Score Distribution for each companies')\n","#     plt.show()\n","\n","# ##################################  \n","#     # Normality test\n","#     stat = {}\n","#     ## Q-Q Plot visualization (set count of plots)\n","#     total_cnt = len(comp_lst)\n","#     if total_cnt > 3:\n","#         row_cnt = total_cnt//3 + 1\n","#         col_cnt = total_cnt//row_cnt + 1\n","#     else:\n","#         row_cnt = 1\n","#         col_cnt = total_cnt\n","#     fig = plt.figure(figsize = (18,row_cnt*6))\n","#     cnt=1     # axis index for visualization\n","#     for k in comp_lst:\n","#         data = analysis_data[analysis_data.comp_name == k].nfr_pulse_scaled.dropna()\n","#         ax = fig.add_subplot(row_cnt,col_cnt,cnt)\n","#         stats.probplot(data,dist='norm',plot=ax)  \n","#         ax.set_title(label = f'{k} Q-Q Plot')\n","#         # Normality Test(KS test & Shapiro test)\n","#         test_stat_ks, p_val_ks = stats.kstest(data,'norm', args = (data.mean(),data.var()**0.5))\n","#         test_stat_sh, p_val_sh = stats.shapiro(data)\n","#         stat[k] = {'Kolmogorov-Smirnov p-value': round(p_val_ks,2),'Shapiro-Wilks p-value': round(p_val_sh,2)}\n","#         cnt+=1\n","#     plt.show() \n","#     display(pd.DataFrame(stat).T)\n","    \n","#     discrim = sum(sum(np.array(pd.DataFrame(stat).T) < 0.05))\n","    \n","#     print('<정규성 검정>')\n","#     if discrim > 0:\n","#         print('정규성 가정을 만족하지 못했습니다. 비모수 검정 Kruskal Wallis Test를 진행합니다\\n')\n","#         normality = False\n","#     elif discrim == 0:\n","#         print('정규성 가정을 만족했습니다. 등분산성 검정을 진행합니다')\n","#         normality  = True\n","# ##################################  \n","#     # Kruskal-Wallis test\n","#     if normality == False:\n","#         if total_cnt >=3:\n","#             kw_input = [analysis_data[analysis_data.comp_name == name]['nfr_pulse_scaled'] for name in comp_lst]\n","#             kw_result = stats.kruskal(*kw_input)\n","#             kw_statistic = round(kw_result.statistic,2)\n","#             kw_pvalue = round(kw_result.pvalue,2)\n","#             if  kw_pvalue < 0.05:\n","#                 print(f\"<분산분석 결과>\\nKruskal Wallis Test 결과 통계량은 {kw_statistic} p-value는 {kw_pvalue}으로 유의미합니다. 사후검증을 진행합니다\\n\")\n","#                 result = round(sp.posthoc_conover(analysis_data, val_col = 'nfr_pulse_scaled',group_col = 'comp_name',p_adjust = 'bonferroni'),2)\n","#                 output_list = result.columns\n","#                 print('<사후검정 결과>')\n","#                 for i in range(len(output_list)):\n","#                     temp = result[output_list[i]][[n for n in output_list if n != output_list[i]]][i:]\n","#                     for j in range(temp.shape[0]):\n","#                         if temp[j] < 0.05:\n","#                             print(f'{output_list[i].ljust(10)} \\t{temp.index[j].ljust(10)} \\tp-value: {temp[j]}\\t Meaningful Difference.')\n","#                         else:\n","#                             print(f'{output_list[i].ljust(10)} \\t{temp.index[j].ljust(10)} \\tp-value: {temp[j]}\\t No Meaningful Difference')\n","#                 display(result.style.background_gradient())\n","#                 # 산업 평균과 비교\n","#                 print('\\n<산업평균과의 비교>')\n","#                 part_result = result[result['산업평균'].index != '산업평균']['산업평균'] < 0.05\n","#                 for i in range(part_result.shape[0]):\n","#                     if part_result[i] == True:\n","#                         if ranking.loc[part_result.index[i]].compare_ratio >0:\n","#                             print(f'{part_result.index[i].ljust(10)} \\tsignificantly \\thigher \\tthan the industry average: {ranking.loc[part_result.index[i]].compare_ratio}%')\n","#                         elif ranking.loc[part_result.index[i]].compare_ratio <0:\n","#                             print(f'{part_result.index[i].ljust(10)} \\tsignificantly \\tlower \\tthan the industry average: {ranking.loc[part_result.index[i]].compare_ratio}%')\n","#                     elif part_result[i] == False:\n","#                         print(f'{part_result.index[i].ljust(10)} \\tinsignificant difference \\t\\t\\t : {ranking.loc[part_result.index[i]].compare_ratio}%')\n","                \n","#                 return ranking\n","#             else:\n","#                 print(f\"Kruskal Wallis Test 결과 통계량은 {kw_statistic} p-value는 {kw_pvalue}으로 회사간 리스크 차이는 유의미하지 않습니다\")\n","\n","#         # Mann Whitney U Test\n","#         elif total_cnt == 2:\n","#             mh_input = [analysis_data[analysis_data.comp_name == name]['nfr_pulse_scaled'] for name in comp_lst]\n","#             mh_result = stats.mannwhitneyu(mh_input[0],mh_input[1],use_continuity= True, alternative='two-sided', method = 'auto')            \n","#             mh_statistic = round(mh_result[0])\n","#             mh_pvalue = round(mh_result[1])\n","#             if mh_pvalue < 0.05:\n","#                 print(f\"<Man-Whitney U-Test 결과 결과>\\n{comp_lst[0]} 과(와) {comp_lst[1]} 는(은) ESG 리스크 측면에서 유의미한 차이가 있습니다. 통계량: {mh_statistic} p-value: {mh_pvalue}\\n\")\n","#             else:\n","#                 print(f\"<Man-Whitney U-Test 결과 결과>\\n{comp_lst[0]} 과(와) {comp_lst[1]} 는(은) ESG 리스크 측면에서 유의미한 차이가 없습니다. 통계량: {mh_statistic} p-value: {mh_pvalue}\\n\")\n","#             return mh_result\n","\n","\n","# ##################################  \n","\n","\n","#     # Homoscedasticity Test\n","#     elif normality == True:\n","#         pass"]},{"cell_type":"code","execution_count":null,"id":"ebf71dea","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.411475Z","start_time":"2023-01-09T03:46:41.411462Z"}},"outputs":[],"source":["# 간소화\n","def industry_analysis_pulse_short(analysis_data,parametric=True,materiality = 'data'):\n","\n","    #산업군 내 비교를 위한 산업평균 데이터 추가\n","    avg = analysis_data.groupby('date').mean()\n","    avg['comp_name'] = '산업평균'\n","    \n","    analysis_data = pd.concat([analysis_data,avg])\n","    #산업군 내 평균 비교를 위한 순위 생성\n","    if parametric == False:\n","        ranking = pd.DataFrame(analysis_data.groupby('comp_name').median()[f'nfr_{materiality}_scaled_pulse']).sort_values(by = f'nfr_{materiality}_scaled_pulse',ascending=False)\n","    elif parametric == True:\n","        ranking = pd.DataFrame(analysis_data.groupby('comp_name').mean()[f'nfr_{materiality}_scaled_pulse']).sort_values(by = f'nfr_{materiality}_scaled_pulse',ascending=False)\n","    ranking['compare_ratio'] = round(100 * (ranking[f'nfr_{materiality}_scaled_pulse'] - ranking.loc['산업평균',f'nfr_{materiality}_scaled_pulse']) / ranking.loc['산업평균',f'nfr_{materiality}_scaled_pulse'],2)\n","    ranking.drop('산업평균',axis=0,inplace= True)\n","    ranking['rank'] = ranking[f'nfr_{materiality}_scaled_pulse'].rank(axis = 0,method='max',ascending=False)\n","    ranking['pct'] = round(100 * ranking['rank'] / ranking.shape[0],2)\n"," \n","    \n","    # NFR Score Distribution for each companies\n","    comp_lst = analysis_data.comp_name.unique()\n","    plt.figure(figsize = (20,7))\n","    for k in range(len(comp_lst)):\n","        sns.kdeplot(data = analysis_data[analysis_data.comp_name == comp_lst[k]][f'nfr_{materiality}_scaled_pulse'],shade=True,label=comp_lst[k])\n","        if parametric == False:\n","            plt.axvline(x = np.percentile(analysis_data[analysis_data.comp_name == comp_lst[k]][f'nfr_{materiality}_scaled_pulse'],50),linewidth = 1,ls = '--',color='blue')\n","            plt.text(np.percentile(analysis_data[analysis_data.comp_name == comp_lst[k]][f'nfr_{materiality}_scaled_pulse'],50)+0.1,np.random.uniform(0,0.05),f'{comp_lst[k]}',color='black')\n","        elif parametric == True:\n","            plt.axvline(x = np.mean(analysis_data[analysis_data.comp_name == comp_lst[k]][f'nfr_{materiality}_scaled_pulse']),linewidth = 1,ls = '--',color='blue')\n","            plt.text(np.mean(analysis_data[analysis_data.comp_name == comp_lst[k]][f'nfr_{materiality}_scaled_pulse'])+0.1,np.random.uniform(0,0.05),f'{comp_lst[k]}',color='black')\n","\n","    plt.legend()\n","    plt.title('NFR Score Distribution for each companies')\n","    plt.show()\n","\n","\n","##################################  \n","    # Kruskal-Wallis test\n","    if parametric == False:\n","        kw_input = [analysis_data[analysis_data.comp_name == name][f'nfr_{materiality}_scaled_pulse'] for name in comp_lst]\n","        kw_result = stats.kruskal(*kw_input)\n","        kw_statistic = round(kw_result.statistic,2)\n","        kw_pvalue = round(kw_result.pvalue,2)\n","        if  kw_pvalue < 0.05:\n","            print(f\"<분산분석 결과>\\nKruskal Wallis Test 결과 통계량은 {kw_statistic} p-value는 {kw_pvalue}으로 유의미합니다. 사후검증을 진행합니다\\n\")\n","            result = round(sp.posthoc_conover(analysis_data, val_col = f'nfr_{materiality}_scaled_pulse',group_col = 'comp_name',p_adjust = 'bonferroni'),2)\n","            output_list = result.columns\n","            print('<사후검정 결과>')\n","            for i in range(len(output_list)):\n","                temp = result[output_list[i]][[n for n in output_list if n != output_list[i]]][i:]\n","                for j in range(temp.shape[0]):\n","                    if temp[j] < 0.05:\n","                        print(f'{output_list[i].ljust(10)} \\t{temp.index[j].ljust(10)} \\tp-value: {temp[j]}\\t Meaningful Difference.')\n","                    else:\n","                        print(f'{output_list[i].ljust(10)} \\t{temp.index[j].ljust(10)} \\tp-value: {temp[j]}\\t No Meaningful Difference')\n","            display(result.style.background_gradient())\n","            # 산업 평균과 비교\n","            print('\\n<산업평균과의 비교>')\n","            significance = {}\n","            part_result = result[result['산업평균'].index != '산업평균']['산업평균'] < 0.05\n","            for i in range(part_result.shape[0]):\n","                if part_result[i] == True:\n","                    if ranking.loc[part_result.index[i]].compare_ratio >0:\n","                        print(f'{part_result.index[i].ljust(10)} \\tsignificantly \\thigher \\tthan the industry average: {ranking.loc[part_result.index[i]].compare_ratio}%')\n","                        significance[part_result.index[i]] = 1\n","                    elif ranking.loc[part_result.index[i]].compare_ratio <0:\n","                        print(f'{part_result.index[i].ljust(10)} \\tsignificantly \\tlower \\tthan the industry average: {ranking.loc[part_result.index[i]].compare_ratio}%')\n","                        significance[part_result.index[i]] = 1\n","                elif part_result[i] == False:\n","                    print(f'{part_result.index[i].ljust(10)} \\tinsignificant difference \\t\\t\\t : {ranking.loc[part_result.index[i]].compare_ratio}%')\n","                    significance[part_result.index[i]] = 0\n","            _= pd.DataFrame(significance,index = ['significance']).T\n","            result = pd.concat([ranking,_],axis=1).sort_values(by='rank')\n","\n","            return result\n","        else:\n","            print(f\"Kruskal Wallis Test 결과 통계량은 {kw_statistic} p-value는 {kw_pvalue}으로 회사간 리스크 차이는 유의미하지 않습니다\")\n","    elif parametric == True:\n","        # 이분산 전제로 분석 진행  -> Welch's ANOA & Games HoWell Post Hoc\n","        # Welch's ANOVA를 사용할 경우 pingouin이 필요함 -> 설치 여부 \n","        # 정규성 등분산성 신경쓰지 않고 One-Way-ANOVA 진행\n","\n","        model = ols(f'nfr_{materiality}_scaled_pulse ~ comp_name',analysis_data).fit()\n","        aov_pvalue = round(anova_lm(model)['PR(>F)'].comp_name,2)\n","        aov_statistic= round(anova_lm(model)['F'].comp_name,2)\n","        if  aov_pvalue < 0.05:\n","            print(f\"<분산분석 결과>\\nOne-Way-ANOVA Test 결과 통계량은 {aov_statistic} p-value는 {aov_pvalue}으로 유의미합니다. 사후검증을 진행합니다\\n\")\n","            hsd = pairwise_tukeyhsd(analysis_data[f'nfr_{materiality}_scaled_pulse'], analysis_data['comp_name'], alpha=0.05)\n","            results_as_html = hsd.summary().as_html()\n","            result = pd.read_html(results_as_html, header=0)[0]\n","            \n","            print('<사후검정 결과>')\n","            for i in range(result.shape[0]):\n","                if result['p-adj'][i] < 0.05:\n","                    print(f\"{result['group1'][i].ljust(10)} \\t{result['group2'][i].ljust(10)} \\tp-value: {result['p-adj'][i]}\\t Meaningful Difference.\")\n","                else:\n","                    print(f\"{result['group1'][i].ljust(10)} \\t{result['group2'][i].ljust(10)} \\tp-value: {result['p-adj'][i]}\\t No Meaningful Difference.\")\n","            \n","            # 산업 평균과 비교\n","            print('\\n<산업평균과의 비교>')\n","            significance = {}\n","            avg_result1 = result[(result.group1 == '산업평균')]\n","            avg_result2 = result[(result.group2 == '산업평균')]\n","            avg_result2.columns = ['group2', 'group1', 'meandiff', 'p-adj', 'lower', 'upper', 'reject']\n","            avg_result = pd.concat([avg_result1,avg_result2]).reset_index(drop=True)\n","            for i in range(avg_result.shape[0]):\n","                if avg_result['p-adj'][i] < 0.05:\n","                    if ranking.loc[avg_result.group2[i]].compare_ratio >0:\n","                        print(f'{avg_result.group2[i].ljust(10)} \\tsignificantly \\thigher \\tthan the industry average: {ranking.loc[avg_result.group2[i]].compare_ratio}%')\n","                        significance[avg_result.group2[i]] = 1\n","                    elif ranking.loc[avg_result.group2[i]].compare_ratio <0:\n","                        print(f'{avg_result.group2[i].ljust(10)} \\tsignificantly \\tlower \\tthan the industry average: {ranking.loc[avg_result.group2[i]].compare_ratio}%')\n","                        significance[avg_result.group2[i]] = 1\n","                elif avg_result['p-adj'][i]>=0.05:\n","                    print(f'{avg_result.group2[i].ljust(10)} \\tinsignificant difference \\t\\t\\t : {ranking.loc[avg_result.group2[i]].compare_ratio}%')\n","                    significance[avg_result.group2[i]] = 0\n","            _= pd.DataFrame(significance,index = ['significance']).T\n","            result = pd.concat([ranking,_],axis=1).sort_values(by='rank')\n","            return result\n","        else:\n","            print(f\"One-Way-ANOVA Test 결과 통계량은 {aov_statistic} p-value는 {aov_pvalue}으로 회사간 리스크 차이는 유의미하지 않습니다\")"]},{"cell_type":"code","execution_count":null,"id":"22b731bf","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.413056Z","start_time":"2023-01-09T03:46:41.413039Z"}},"outputs":[],"source":["# 데이터만 추출하기 위한\n","def industry_analysis_pulse_data(analysis_data,parametric=True,materiality = 'data'):\n","    #산업군 내 비교를 위한 산업평균 데이터 추가\n","    avg = analysis_data.groupby('date').mean()\n","    avg['comp_name'] = '산업평균'\n","    analysis_data = pd.concat([analysis_data,avg])\n","    #산업군 내 평균 비교를 위한 순위 생성\n","    if parametric == False:\n","        ranking = pd.DataFrame(analysis_data.groupby('comp_name').median()[f'nfr_{materiality}_scaled_pulse']).sort_values(by = f'nfr_{materiality}_scaled_pulse',ascending=False)\n","    elif parametric == True:\n","        ranking = pd.DataFrame(analysis_data.groupby('comp_name').mean()[f'nfr_{materiality}_scaled_pulse']).sort_values(by = f'nfr_{materiality}_scaled_pulse',ascending=False)\n","    ranking['compare_ratio'] = round(100 * (ranking[f'nfr_{materiality}_scaled_pulse'] - ranking.loc['산업평균',f'nfr_{materiality}_scaled_pulse']) / ranking.loc['산업평균',f'nfr_{materiality}_scaled_pulse'],2)\n","    ranking.drop('산업평균',axis=0,inplace= True)\n","    ranking['rank'] = ranking[f'nfr_{materiality}_scaled_pulse'].rank(axis = 0,method='max',ascending=False)\n","    ranking['pct'] = round(100 * ranking['rank'] / ranking.shape[0],2)\n","\n","\n","##################################  \n","    # Non-Parametric\n","    if parametric == False:\n","        # 산업 평균과 차이가 유의미한지 여부\n","        result = round(sp.posthoc_conover(analysis_data, val_col = f'nfr_{materiality}_scaled_pulse',group_col = 'comp_name',p_adjust = 'bonferroni'),2)\n","        \n","        significance = {}\n","        part_result = result[result['산업평균'].index != '산업평균']['산업평균'] < 0.05\n","        for i in range(part_result.shape[0]):\n","            if part_result[i] == True:\n","                if ranking.loc[part_result.index[i]].compare_ratio >0:\n","                    significance[part_result.index[i]] = 1\n","                elif ranking.loc[part_result.index[i]].compare_ratio <0:\n","                    significance[part_result.index[i]] = 1\n","            elif part_result[i] == False:\n","                significance[part_result.index[i]] = 0\n","                \n","        _= pd.DataFrame(significance,index = ['significance']).T\n","        result = pd.concat([ranking,_],axis=1).sort_values(by='rank')\n","        return result\n","\n","    # Parametric        \n","    elif parametric == True:\n","        # 산업 평균과 차이가 유의미한지 여부\n","        hsd = pairwise_tukeyhsd(analysis_data[f'nfr_{materiality}_scaled_pulse'], analysis_data['comp_name'], alpha=0.05)\n","        results_as_html = hsd.summary().as_html()\n","        result = pd.read_html(results_as_html, header=0)[0]\n","        \n","        significance = {}\n","        avg_result1 = result[(result.group1 == '산업평균')]\n","        avg_result2 = result[(result.group2 == '산업평균')]\n","        avg_result2.columns = ['group2', 'group1', 'meandiff', 'p-adj', 'lower', 'upper', 'reject']\n","        avg_result = pd.concat([avg_result1,avg_result2]).reset_index(drop=True)\n","        for i in range(avg_result.shape[0]):\n","            if avg_result['p-adj'][i] < 0.05:\n","                if ranking.loc[avg_result.group2[i]].compare_ratio >0:\n","                    significance[avg_result.group2[i]] = 1\n","                elif ranking.loc[avg_result.group2[i]].compare_ratio <0:\n","                    significance[avg_result.group2[i]] = 1\n","            elif avg_result['p-adj'][i]>=0.05:\n","                significance[avg_result.group2[i]] = 0\n","                \n","        _= pd.DataFrame(significance,index = ['significance']).T\n","        result = pd.concat([ranking,_],axis=1).sort_values(by='rank')\n","        return result"]},{"cell_type":"markdown","id":"74de5ffb","metadata":{},"source":["# Index Analytics (Past)"]},{"cell_type":"code","execution_count":null,"id":"b102fede","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.414662Z","start_time":"2023-01-09T03:46:41.414650Z"}},"outputs":[],"source":["# def event_analytics(esg_result,stock_data):\n","#     df = esg_result.copy()\n","#     # 데이터 생성\n","#     column_lst = df.columns[df.columns.str.contains('raw_count')]\n","#     df['denominators'] = df[column_lst].sum(axis=1)\n","#     df['denominators'] = df['denominators'].apply(lambda x: -1 if x == 0 else x)\n","#     for c in column_lst:\n","#         df[f'{c}_ratio'] = df[c]/df['denominators']\n","#     df['denominators'] = df['denominators'].apply(lambda x: 0 if x == -1 else x)\n","    \n","#     # 시각화\n","#     fig = make_subplots(rows=8,cols=1,shared_xaxes=True,\n","#                         specs = [[{\"secondary_y\": True, \"rowspan\":4}],\n","#                                  [None],[None],[None],\n","#                                  [{\"rowspan\":2}],[None],\n","#                                  [{\"rowspan\":2}],[None]])\n","\n","#     fig.add_trace(go.Scatter(x=df.index[-30:], y=df['nfr_pulse_scaled'][-30:],\n","#                                  mode='lines', name='NFR Pulse',marker = dict(color = 'black')),row=1,col=1)\n","#     for i in range(len(column_lst)):\n","#         fig.add_trace(go.Scatter(x=df.index[-30:], y=df[f'exp_scaled_{column_lst[i][10:]}'][-30:],\n","#                                  mode='lines', name=f'{column_lst[i][10:]} Pulse',marker = dict(color = colors[i])),row=1,col=1)\n","#         fig.add_trace(go.Bar(x=df.index[-30:], y=df[f'{column_lst[i]}'][-30:],\n","#                              name=f'{column_lst[i][10:]}',marker = dict(color = colors[i])),row=5,col=1)\n","#         fig.add_trace(go.Bar(x=df.index[-30:], y=df[f'{column_lst[i]}_ratio'][-30:],\n","#                              name=f'{column_lst[i][10:]}',marker = dict(color = colors[i])),row=7,col=1)\n","\n","#     fig.update_layout(barmode='stack')\n","\n","#     fig.update_layout(showlegend=True, title_text=f\"{stock_data.reset_index().stock_code[0]} : {stock_data.reset_index().stock_name[0]} Event Analytic\")\n","#     fig.update_xaxes(title_text=\"Date\",title_font=dict(size=10),row=7,col=1)\n","#     fig.update_yaxes(title_text=\"NFR Pulse\",title_font=dict(size=10),row=1,col=1)\n","#     fig.update_yaxes(title_text=\"Count of Articles\",title_font=dict(size=10),range=[0,int(df[-30:].denominators.max())+1],row=5,col=1)\n","#     fig.update_yaxes(title_text=\"Ratio of Articles\",title_font=dict(size=10),range=[0, 1],row=7,col=1)\n","#     fig.show()\n","#     return df"]},{"cell_type":"markdown","id":"f5970cf8","metadata":{},"source":["# Event Analytics (Past)"]},{"cell_type":"code","execution_count":null,"id":"17208a7f","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.415962Z","start_time":"2023-01-09T03:46:41.415950Z"}},"outputs":[],"source":["def deduplication(articles):\n","    print(articles.shape)\n","    articles = articles[~articles['link'].duplicated()]\n","    print(articles.shape)\n","    articles = articles[~articles[['clean_title','press']].duplicated()]\n","    print(articles.shape)\n","    articles = articles.dropna()\n","    print(articles.shape)\n","    return articles\n","\n","def basic_preprocessing(df,comp_code):\n","    df = deduplication(df)\n","\n","    df.time = df.time.apply(lambda x: pd.to_datetime(x[:10]))\n","    df['cluster_cs'][(df.cluster_id == -1) & (df.cluster_cs !=0)] = 0\n","    df['centroid'] = 0\n","    \n","    _index = df[['cluster_id','cluster_cs']].groupby('cluster_id').idxmax()['cluster_cs']\n","    centroid  = df.loc[_index]\n","    centroid['centroid'] = 1\n","    centroid.reset_index(drop=False,inplace=True)\n","    \n","    preproc = pd.concat([df,centroid])\n","    preproc = preproc[~preproc['link'].duplicated(keep='last')]\n","    company = preproc[preproc.entity_tags.str.contains(comp_code)].reset_index(drop=True)\n","    print(company.shape)\n","    return company\n","\n","def spread_df(df,tags):\n","    # Erase data base on the specific tag(sasb or iptc)\n","    df = df[(df[tags] != '[]') & (df[tags] != None)]    \n","    super_x = []\n","    for i in tqdm(df.index):\n","        __df = pd.read_json(df[tags][i])\n","        # Map one article to one taxonomy label\n","        try:\n","            __df = __df[__df.parent_sent_i.apply(lambda x: True if (0 in x)|(1 in x) else False)].reset_index(drop=True).loc[[0]]\n","        except:\n","            __df =__df.loc[[__df.relevance.idxmax()]]\n","        \n","        __df['time'] = df.time[i]\n","        __df['title'] = df.clean_title[i]\n","        __df['journal'] = df.press[i]\n","        __df['link'] = df.link[i]\n","        __df['cluster_id'] = df.cluster_id[i]\n","        __df['cluster_cs'] = df.cluster_cs[i]\n","        __df['centroid'] = df.centroid[i]\n","        __df.label\n","        super_x.append(__df)\n","    \n","    res = pd.concat(super_x).reset_index(drop=True)\n","    res['neg'] = res['negative']/res['count']\n","    res = res[['time','title','cluster_id','cluster_cs','centroid','taxonomy','id','label','relevance','ratio','score','neg','parent_sent_i','journal','link']]\n","    # Erase data does not belong to the specific cluster\n","    res = res[res.cluster_id != -1]\n","    # Map one id to one taxonomy label = cluster_label\n","    id_lst = res.cluster_id.unique()\n","    gic_map_dict = {}\n","    for i in tqdm(id_lst):\n","        gic_map_dict[i] = res[res.cluster_id == i ].groupby('label').count()['time'].idxmax()\n","    res['cluster_label'] = res.cluster_id.apply(lambda x: gic_map_dict[x])\n","    return res"]},{"cell_type":"code","execution_count":null,"id":"d89ba759","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.417162Z","start_time":"2023-01-09T03:46:41.417149Z"}},"outputs":[],"source":["def post_preprocessing(df):\n","\n","    temp_ = df.groupby('cluster_label').agg(['count','mean'])\n","    r = pd.concat([temp_['time']['count'].rename('vol'),temp_['neg']['mean'].rename('negativity')],axis=1)\n","    # 스케일링\n","    r['scale_vol'] = scale(r.vol,0.0006,2)\n","    r['scale_negativity'] = scale(r.negativity,2,2)\n","    # weight_score column 생성\n","    r['weight_score'] = r['scale_vol'] * r['scale_negativity']/100\n","    print(r.shape)\n","\n","    # weight score = 0 제외\n","    r = r[r['weight_score'] !=0].reset_index()\n","    print(r.shape)\n","    \n","    #출력할 데이터를 위한 df 클러스터 개수\n","    cluster_contents_df = df.groupby(['cluster_label','cluster_id']).count()['title'].rename('article_count').reset_index()\n","    cluster_contents_dict = {}\n","    for i in cluster_contents_df.cluster_label.unique():\n","        cluster_contents_dict[i]=cluster_contents_df[cluster_contents_df.cluster_label == i].cluster_id.to_list()\n","\n","    r['contents'] = r.cluster_label.apply(lambda x: cluster_contents_dict[x])\n","    r['cluster_cnt'] = r.cluster_label.apply(lambda x: len(cluster_contents_dict[x]))\n","    \n","    return r\n","\n","\n","def output_data_table(df,label_name):\n","    cluster_contents_df = df.groupby(['cluster_label','cluster_id']).count()['title'].rename('article_count').reset_index()\n","    # Data Table\n","    _ = df[df.cluster_label == label_name]\n","    _ = pd.merge(_,cluster_contents_df[['cluster_id','article_count']])\n","    output_data = _.loc[_[['cluster_id','cluster_cs']].groupby('cluster_id').idxmax()['cluster_cs']].sort_values('neg',ascending=False)\n","\n","    return output_data[['cluster_id','cluster_label','article_count','ratio','title','time','neg','link']]"]},{"cell_type":"code","execution_count":null,"id":"44cfdde8","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.418519Z","start_time":"2023-01-09T03:46:41.418507Z"},"code_folding":[]},"outputs":[],"source":["def visualization_bubble_only(df):\n","    fig = px.scatter(df,x = 'scale_vol',y='scale_negativity',color='cluster_label',size = 'cluster_cnt')\n","    fig.add_hline(y= df.scale_negativity.median(),annotation_text = 'Scaled Negative Mean',line_color = 'blue',annotation_font_size=10, annotation_font_color=\"blue\",annotation_position = 'bottom right')\n","    fig.add_vline(x= df.scale_vol.median(),annotation_text = 'Scaled Volume Mean',line_color = 'red',annotation_font_size=10, annotation_font_color=\"red\",annotation_position = 'bottom right')\n","    fig.update_layout(hovermode = 'x unified')\n","    fig.show()\n","def visualization_bar_only(df):\n","    fig = px.bar(df,y='cluster_label',x= 'weight_score')\n","    fig.update_layout(barmode='relative', yaxis={'categoryorder':'total ascending'})\n","    fig.update_yaxes(dict(tickfont=dict(size = 10)))\n","    fig.update_xaxes(dict(tickfont=dict(size = 10)))\n","    fig.show()\n","def event_visualization(ndf,option = 'mix'):\n","    if option == 'bar':\n","        visualization_bar_only(ndf)\n","    elif option == 'bubble':\n","        visualization_bubble_only(ndf)\n","    elif option == 'mix':\n","        fig = make_subplots(rows=6,cols=1,\n","                            specs = [[{\"secondary_y\": True, \"rowspan\":3}],\n","                                     [None],[None],\n","                                     [{\"rowspan\":3}],[None],[None]])\n","\n","        for label in ndf.cluster_label:\n","            df = ndf[ndf.cluster_label == label]\n","            fig.add_trace(go.Scatter(x=df['scale_vol'],\n","                                     y=df['scale_negativity'],\n","                                     name = label,\n","                                     marker_size = df['cluster_cnt']/10),row=1,col=1)\n","\n","        fig.add_trace(go.Bar(x=ndf.sort_values('weight_score')['weight_score']/100,\n","                             y=ndf.sort_values('weight_score')['cluster_label'],orientation='h')\n","                      ,row=4,col=1)\n","        fig.update_layout(barmode='relative')\n","        fig.show()\n","\n"]},{"cell_type":"code","execution_count":null,"id":"e73fa893","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.419724Z","start_time":"2023-01-09T03:46:41.419712Z"}},"outputs":[],"source":["def scale(series, lambda_=0.005, curvature=3):\n","    return 100*((1 - np.exp(-lambda_*series))**(1/curvature))  "]},{"cell_type":"markdown","id":"87370fbe","metadata":{},"source":["# Stock price / NFR score"]},{"cell_type":"code","execution_count":null,"id":"0ee1bcb1","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.420881Z","start_time":"2023-01-09T03:46:41.420869Z"}},"outputs":[],"source":["# 코스피200 종목 크롤링 => columns = ['corp_code', 'stock_code', 'stock_name']\n","\n","import requests\n","from bs4 import BeautifulSoup\n","import re\n","\n","\n","kospi200_list = []\n","\n","# last_page = 코스피 200 종목 목록의 '맨뒤' 페이지 (last page of the kospi200 company's name list on the 'finance.naver.com')\n","url = f'https://finance.naver.com/sise/entryJongmok.naver?&page=1'\n","res = requests.get(url, headers={'User-agent': 'Mozilla/5.0'})\n","bs = BeautifulSoup(res.text, 'lxml')\n","\n","pgrr = bs.find('td', {'class' : 'pgRR'})\n","last_page = int(pgrr.a['href'].split('=')[-1])\n","\n","for i in range(1, last_page+1):\n","    url = f'https://finance.naver.com/sise/entryJongmok.naver?&page={i}'\n","    \n","    res = requests.get(url, headers={'User-agent': 'Mozilla/5.0'})\n","    bs = BeautifulSoup(res.text, 'lxml')\n","    stock_name = bs.find_all('td', {'class' : 'ctg'})\n","    \n","    for item in stock_name:\n","        txt = item.a['href']\n","        k = re.search('[\\d]+', txt)\n","        \n","        code = k.group()\n","        name = item.text\n","        data = code, name\n","        kospi200_list.append(data)\n","        \n","        \n","    \n","kospi200_df = pd.DataFrame(kospi200_list, \n","                           columns=['stock_code', 'stock_name'],\n","                           index=[x for x in range(1,201)])\n","\n","final_kospi200 = pd.merge(company_data[['corp_code', 'stock_code', 'stock_name']], kospi200_df, how='right', on='stock_code')\n","final_kospi200.drop(['stock_name_y'], axis=1, inplace=True)\n","final_kospi200.rename(columns={'stock_name_x' : 'stock_name'}, inplace=True)\n","final_kospi200.index = final_kospi200.index + 1\n","\n","# final_kospi200"]},{"cell_type":"markdown","id":"2e62c86f","metadata":{},"source":["## Correlation among price(close), volume and NFR score"]},{"cell_type":"code","execution_count":null,"id":"296e3968","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.422080Z","start_time":"2023-01-09T03:46:41.422068Z"}},"outputs":[],"source":["from pykrx import stock\n","import scipy.stats as stats\n","\n","# for i in company_data['stock_name']:\n","#     stock_price = call_stock_data(stock, '2017-01-01', '2022-11-30')\n","corr_saved = []\n","corr_stock = []\n","no_meaningful_corr_stock=[]\n","corr_erro_list = []\n","\n","stock_list=list(final_kospi200['stock_name'])\n","\n","\n","def find_corr(stock_list):\n","\n","    log_num = 1\n","    \n","    for i in range(len(stock_list)):\n","        stock_price = call_stock_data(stock_list[i], '2017-01-01', '2022-11-30')\n","\n","        sasb_code, data_code, esg_exposure = call_esg_data(stock_list[i],from_ts, to_ts,industry = False,scaled=1,data_top=10)\n","\n","        if len(esg_exposure) >=1 :\n","            esg = esg_exposure[['date', 'nfr_data_scaled_pulse', 'nfr_sasb_scaled_pulse',\n","                               'nfr_data_scaled_score', 'nfr_sasb_scaled_score',\n","                               'nfr_data_scaled_score_change', 'nfr_sasb_scaled_score_change']]\n","            esg.set_index('date', inplace=True)\n","\n","            stock_df = pd.merge(stock_price, esg, how='right', on='date')\n","\n","            stock_df['1년지수이평'] = stock_df['종가'].ewm(span=224).mean()\n","            stock_df['data_score_224days'] = stock_df['nfr_data_scaled_pulse'].ewm(span=224).mean()\n","            stock_df['sasb_score_224days'] = stock_df['nfr_sasb_scaled_pulse'].ewm(span=224).mean()\n","            stock_df.loc[:, '시가' : '거래대금'] = stock_df.loc[:, '시가' : '거래대금'].fillna(method='ffill')\n","            stock_df.loc[:, '시가' : '거래대금'] = stock_df.loc[:, '시가' : '거래대금'].fillna(method='bfill')\n","            stock_df[['등락률']] = stock_df[['등락률']].fillna(0)\n","\n","            stock_from2018 = stock_df[stock_df.index >= '2018-01-01']\n","\n","            try:\n","                temp_list = []\n","\n","                com_price_pulse_data = stats.pearsonr(stock_from2018['종가'], stock_from2018['nfr_data_scaled_pulse'])[:]\n","                com_price_pulse_sasb = stats.pearsonr(stock_from2018['종가'], stock_from2018['nfr_sasb_scaled_pulse'])[:]\n","\n","                com_price_score_data = stats.pearsonr(stock_from2018['종가'], stock_from2018['nfr_data_scaled_score'])[:]\n","                com_price_score_sasb = stats.pearsonr(stock_from2018['종가'], stock_from2018['nfr_sasb_scaled_score'])[:]\n","\n","                com_1year_ema_data = stats.pearsonr(stock_from2018['1년지수이평'], stock_from2018['data_score_224days'])[:]\n","                com_1year_ema_sasb = stats.pearsonr(stock_from2018['1년지수이평'], stock_from2018['sasb_score_224days'])[:]\n","\n","                com_volume_pulse_data = stats.pearsonr(stock_from2018['거래량'], stock_from2018['nfr_sasb_scaled_pulse'])[:]\n","                com_volume_pulse_sasb = stats.pearsonr(stock_from2018['거래량'], stock_from2018['nfr_sasb_scaled_pulse'])[:]\n","\n","                com_volume_score_sasb = stats.pearsonr(stock_from2018['거래량'], stock_from2018['nfr_sasb_scaled_score'])[:]\n","                com_volume_score_sasb = stats.pearsonr(stock_from2018['거래량'], stock_from2018['nfr_sasb_scaled_score'])[:]\n","\n","                temp_list=[com_price_pulse_data, com_price_pulse_sasb, com_price_score_data, com_price_score_sasb,\n","                                com_1year_ema_data, com_1year_ema_sasb, com_volume_pulse_data, com_volume_pulse_sasb,\n","                                com_volume_score_sasb, com_volume_score_sasb]\n","                corr_df = pd.DataFrame(temp_list,\n","                                       columns=['corr', 'pvalue'],\n","                                      index=['com_price_pulse_data', 'com_price_pulse_sasb', 'com_price_score_data', 'com_price_score_sasb',\n","                                'com_price_ema_data', 'com_price_ema_sasb', 'com_volume_pulse_data', 'com_volume_pulse_sasb',\n","                                'com_volume_score_sasb', 'com_volume_score_sasb'])\n","\n","                if len(corr_df[(abs(corr_df['corr'])>=0.5) & (corr_df.pvalue<=0.05)]) >=1 :\n","                    corr_saved.append(corr_df)\n","                    corr_stock.append(stock_list[i])\n","                    print(f'{stock_list[i]} has a meaningful result ! / [{log_num} / {len(stock_list)}]                                      ')\n","                else:\n","                    print('No meaningful correlation result has been revealed in [{}]. {:04d}/{:04d}'.format(stock_list[i], log_num, len(stock_list)), end='\\r')\n","                    no_meaningful_corr_stock.append(stock_list[i])\n","            except Exception as e:\n","                corr_erro_list.append(stock_list[i])\n","                print(f'[Error] An Error has occured for {stock_list[i]} in operating correlation! \\n \\t', e)\n","\n","        log_num+=1\n","    print('Done !')\n"]},{"cell_type":"code","execution_count":null,"id":"b5ba12ab","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.423868Z","start_time":"2023-01-09T03:46:41.423852Z"}},"outputs":[],"source":["# Anaysis for the whole company in Kospi200\n","\n","# stock_list=list(final_kospi200['stock_name'])\n","# find_corr(stock_list)"]},{"cell_type":"markdown","id":"04e83d16","metadata":{},"source":["## Analysis for trends of stock price and NFR score in a company"]},{"cell_type":"code","execution_count":null,"id":"96b284ff","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.425262Z","start_time":"2023-01-09T03:46:41.425246Z"}},"outputs":[],"source":["from matplotlib import dates\n","\n","def comparing_graph(stock):\n","    a,b,c = call_esg_data(stock, from_ts, to_ts,industry = False,scaled=1,data_top=10)\n","\n","    nfr_pulse_df = c[['date', 'nfr_data_scaled_pulse']].set_index('date')\n","    nfr_score_df = c[['date', 'nfr_data_scaled_score']].set_index('date')\n","    nfr_change_df = c[['date', 'nfr_data_scaled_score_change_ratio']].set_index('date')\n","    nfr_sasb_score_df = c[['date', 'nfr_sasb_scaled_pulse']].set_index('date')\n","    \n","    nfr_ema224 = nfr_pulse_df.ewm(span=130).mean()\n","    nfr_logmean_df = c.loc[:, ['date', 'nfr_data_scaled_pulse']].set_index('date')\n","    \n","    company_df = pd.DataFrame(call_stock_data(stock, '2016-01-01', '2022-11-30')['종가'])\n","\n","    # ax1 => 주가, 1년선, 60일선 \n","    plt.rcParams['figure.figsize'] = (30, 10)\n","    fig, ax1 = plt.subplots()\n","    line_company_price = ax1.plot(company_df.index, company_df['종가'], color= 'red', alpha = 0.5, label='sotck Price')\n","    line_company_360 = ax1.plot(company_df.ewm(span=360).mean().index, company_df.ewm(span=360).mean()['종가'], color='black', alpha=1.0, label='1 year price')\n","    #line_company_60 = ax1.plot(company_df.ewm(span=60).mean().index, company_df.ewm(span=60).mean()['종가'], color='orange', alpha=0.7, label='60')\n","\n","    # y축 라벨 및 범위 지정\n","    ax1.set_ylabel('Price', color = 'red', rotation = 0)\n","    ax1.xaxis.set_major_locator(dates.MonthLocator(interval=1))\n","    plt.xticks(rotation=45)\n","\n","\n","    #ax2 = nfr values => data_driven pulse 130일선/360일선 , sasb는 추후.\n","    ax2 = ax1.twinx()\n","    line_nfr_130 = ax2.plot(nfr_ema224.index, nfr_ema224['nfr_data_scaled_pulse'], color='green', alpha=0.7, label='nfr_ewm224')\n","    line_nfr_360 = ax2.plot(nfr_score_df.index, nfr_score_df['nfr_data_scaled_score'], color = 'blue', alpha = 0.7, label='nfr_ewm360')\n","\n","    # y축 라벨 및 범위 지정 => 주가 상승/하락에 맞춰 nfr risk 데이터를 상하 반전시켜 주가의 흐름과 같을 수 있도록 비교 마련\n","    ax2.set_ylabel('nfr', color = 'blue', rotation = 0)\n","    ax2.invert_yaxis()\n","\n","    ax1.grid(True)\n","    plt.title(stock)\n","    \n","    lines = line_company_price + line_company_360 + line_nfr_130 + line_nfr_360\n","    labels = [l.get_label() for l in lines]\n","    ax1.legend(lines, labels, loc='upper right')\n","    plt.show()"]},{"cell_type":"code","execution_count":null,"id":"db427b96","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.426664Z","start_time":"2023-01-09T03:46:41.426652Z"}},"outputs":[],"source":["# 특정 섹터 내 특정 산업군 전체에 대해 주가/nfr 이동평균석 비교 분석\n","def nfr_ma_analysis_industry():\n","    for i in range(len(comparable_company[1])):\n","        plt.subplot(len(comparable_company[1]), 1, i+1)\n","        comparing_graph(comparable_company[1][i])\n"]},{"cell_type":"code","execution_count":null,"id":"74e24560","metadata":{},"outputs":[],"source":[]},{"cell_type":"markdown","id":"5d8e52fd","metadata":{},"source":["# 콘텐츠"]},{"cell_type":"markdown","id":"ba0cc28b","metadata":{},"source":["## Get GICs in Sector / Industry as DataFrame"]},{"cell_type":"code","execution_count":null,"id":"c5d72fc0","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.427735Z","start_time":"2023-01-09T03:46:41.427723Z"}},"outputs":[],"source":["industry_in_sector = company_data[company_data['SICS Codified Sector Code']=='FB']['SICS Codified Industry'].unique()\n","\n","def get_gic_industry_base(industry):\n","    \n","    temp_df = pd.DataFrame(company_data[company_data['SICS Codified Industry']==industry].iloc[0]['SICS Codified Industry Code':].reset_index())\n","\n","    gic_sector_base_ls = []\n","    gic_industry_base_ls = []\n","    topic_sector_base_ls=[]\n","    topic_industry_base_ls=[]\n","\n","    gic_sector_base_ls.append(temp_df.iloc[7].values[1][2:-2].replace(\"'\", \"\").split(','))\n","    gic_industry_base_ls.append(temp_df.iloc[10].values[1][2:-2].replace(\"'\", \"\").split(','))\n","    topic_sector_base_ls.append(temp_df.iloc[8].values[1][2:-2].replace(\"'\", \"\").split(','))\n","    topic_industry_base_ls.append(temp_df.iloc[11].values[1][2:-2].replace(\"'\", \"\").split(','))\n","\n","    temp_ls = [gic_sector_base_ls, gic_industry_base_ls, topic_sector_base_ls, topic_industry_base_ls]\n","    issue_df = pd.DataFrame()\n","    for ls in temp_ls:\n","        issue_df = pd.concat([issue_df, pd.DataFrame(ls).T], axis=1)\n","\n","    issue_df.columns=['gic_sector_base_ls', 'gic_industry_base_ls', 'topic_sector_base_ls', 'topic_industry_base_ls']\n","    \n","    return issue_df"]},{"cell_type":"code","execution_count":null,"id":"001510ba","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.428873Z","start_time":"2023-01-09T03:46:41.428862Z"}},"outputs":[],"source":["gic_industry_total_df = pd.DataFrame()\n","gic_sector_df = pd.DataFrame(get_gic_industry_base(industry_in_sector[0])['gic_sector_base_ls'].dropna())\n","gic_sector_df.columns=[\"gic\"]\n","\n","for i in range(len(industry_in_sector)):\n","    gic_industry_df = pd.DataFrame(get_gic_industry_base(industry_in_sector[i])['gic_industry_base_ls'].dropna())\n","\n","    gic_industry_df.columns=['gic']\n","    gic_industry_df[f'{industry_in_sector[i]}'] = gic_industry_df['gic']\n","    \n","    #gic_industry_columns=[industry_in_sector[i]]\n","    gic_sector_df = pd.merge(gic_sector_df, gic_industry_df, how='left', on='gic')\n","    #gic_industry_total_df = pd.concat([gic_industry_total_df, gic_industry_df], axis=1)\n","    \n","gic_sector_df.index = gic_sector_df.index + 1\n","gic_sector_df.rename(columns={'gic' : \"GIC in 'Food & Beverage' Sector\"}, inplace=True)\n","gic_sector_df = gic_sector_df.fillna('')\n","gic_sector_df"]},{"cell_type":"code","execution_count":null,"id":"a848fa04","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.430122Z","start_time":"2023-01-09T03:46:41.430108Z"},"scrolled":true},"outputs":[],"source":["kospi200_food_sector = company_data[(company_data['SICS Codified Sector Code']=='FB') & (company_data['stock_code'].isin(final_kospi200['stock_code']))][['SICS Codified Industry', 'stock_name']].sort_values('SICS Codified Industry')\n","# kospi200_food_sector = kospi200_food_sector.pivot(columns='SICS Codified Industry', values='stock_name')\n","# kospi200_food_sector\n","kospi200_food_sector.set_index('SICS Codified Industry')"]},{"cell_type":"markdown","id":"5cfa1649","metadata":{},"source":["  2023년 1월 1일부로 식품 포장재에 표시되는 유통기한이 소비기한으로 변경된다. 다만, 식품의약품안전처(식약처)는\n","업계의 기존 포장지 소진을 통한 자원 낭비 방지 및 경영애로를 고려하여 유통기한이 표시된 기존 포장지 사용이 가능하도록\n","1년간 계도기간을 두었으며, 우유는 냉장유통환경 개선 등을 위해 8년 뒤인 2031년부터 적용하게 된다.\n"," \n"," 유통기한 : 제품의 제조일로부터 소비자에게 유통/판매가 허용되는 기한(Sell-by date)\n"," 소비기한 : 식품 등(건강기능식품 포함)에 표시된 보관 방법을 준수할 경우 섭취하여도 안전에 이상이 없는 기한(Use by date)\n"," \n"," 이는 그동안 소비자가 유통기한을 식품의 폐기시점으로 인식해온 것을 개선하고자 함과 동시에 미국, 유럽, 일본, 호주 등의 국가 및\n","국제식품규격위원회(CODEX)에서 식량낭비 감소 및 소비자 정보 제공 등을 위하여 소비기한 표시제를 운영해온 국제적인 추세를\n","반영한 결과다. 우리 나라는 식품폐기량이 연간 548만톤으로 처리비용이 약 1조 960억원에 달하며, 식품폐기 감소로 소비자는 연간\n","8860억원, 산업체는 260억원의 편익이 발생할 것으로 보인다. \n","\n","유엔환경계획(UNEP)이 지난해 발표한 '2021음식 폐기물 지수 보고서'에 따르면 소비자에게 도달하지 않고 폐기되는 식품 폐기물이 만드는 온실가스는 전 세계 배출량의 8~10%를 차지하는 것으로 알려져 있다\n","\n"," 그렇다면 이에 따른 식품 업체들의 ESG 경영 대응 방안에는 어떤 것들이 있을지 오늘은 KOSPI200 기업 내 가공식품 업체에 대해서\n","알아보고자 한다. 먼저 SASB에서 규정한 가공식품 회사들에 대한 'General Issues Code(이하 GIC)' 내용은 다음과 같다.\n"," \n"," 여러 가지 GIC가 고려되어야 하지만 식품 업체라는 특성 탓에 가장 대두되는 요소는 다음 3가지 정도로 좁혀볼 수 있다.\n","- Product Quality & Saftey\n","- Selling Practices & Product Labeling\n","- Supply Chain Management\n","\n"," 1. 아무래도 무엇보다 중요한 건 영양과 더불어 식품의 품질과 안정성이다. 2017년부로 1인당 GDP가 3만불을 돌파했으며 건강이라는\n","주제에 대한 젊은층의 관심 증대와 더불어 고령화가 심각해짐에 따라 사람들은 이제 제품의 '품질'에 대해서 많이 따지게 되었다.\n","소비기한 표시제로 인하여 섭취가 가능함에도 버려지는 식품폐기물을 줄여 온실가스 감축에 도움을 줄 수 있으나, 유통기한만을 따지던\n","나라에서 유통기한을 넘어선 소비기한을 적용시 모두가 우려하는 바는 식품이 부패하거나 오염되는 경우다.\n","\n"," 이에 따라 기업들은 오래 전부터 제품의 더 좋은 품질과 안정성을 경쟁하기 위해 HACCP(식품안전관리 인증),\n","FSSC 22000(식품안전시스템인증), KS(가공식품 산업표준인증) 등 공신력있는 품질 및 안전 관련 인증을 획득해왔다.\n","이는 각 기업의 홈페이지에서 지속경영가능보고서를 통해 참조해볼 수 있다.\n","\n"," 2. 두번째로는 기업의 마케팅과 상품 표시 관련 내용이다. 마케팅과 관련해서는 아동 대상, 영양분 주장, ESG 경영 등과 관련하여\n","소비자를 기만하는 광고 마케팅에 주로 문제가 생길 수 있다. 2021년에 코카콜라는 불충분한 재활용 시설임에도 병을 100% 재활용\n","가능하다고 한 허위 마케팅으로 고소를 당했고, 맥도날드와 버거킹은 포장지에 PFA를 사용한 혐의로 소송을 당한 바 있다.\n","는 맥도날드가 포장지에 PFA를 사용한 혐의로 지난 3월 소송을 당했고, 버거킹도 같은 혐의로 4월에 소송을 당했다.\n","\n"," 상품 표시 내용과 관련해서는 아직까지도 꾸준하게 뉴스에 등장하는 부분이다. 농식품과 관련해서는 언제나 원산지 내용으로 소비자들이\n","혼란을 겪었고 유전자변형식품(GMO)나 성분 등과 관련하여 아직까지도 종종 소송이 걸린다. 상품 표시 내용은 소비자들로 하여금\n","구매 및 섭취에 대한 결정을 내리는 데에 있어 가장 중요한 정보를 담고 있기 때문에 기업에 대한 소비자들의 신용에도 직결되는\n","매우 중요한 내용이다.\n","\n","그럼에도 불구하고 가장 최근인 2022년 12월 30일에 세계적으로 잘 알려진 초콜릿 가공 업체인 허쉬(Hershey's)는\n","한 소비자로부터 초콜릿에 중금속인 납과 카드뮴이 함유됐다는 컨슈머리포트로 인해 소송을 당했다. 또한 미국의 대표적인 식품기업인\n","크래프트 하인즈’(Kraft Heinz)는 인스턴트 제품 준비에 걸리는 시간이 사실과 다르다며 허위 광고로 소비자를 기만했다며 집단\n","소송을 냈다. 두 사례의 공통된 부분 중 인상깊은 점은 '그 내용을 알았더라면 사지 않았을 것'이라는 소비자들의 주장이다. 이같이 소비자의\n","행동을 넛지(Nudge)하도록 만드는 상품 표시 내용은 식품 기업에게 있어 확인하고 또 확인해야 할 사안이다.\n","\n"," 3. 세번째로는 공급망 관련 이슈이다. 코로나 팬데믹에 이어 러시아-우크라이나 전쟁과 인도의 밀 수출 제한 등을 겪으며 국내 기업들은\n","공급망 대란을 겪고 있는 중이다. 또한 러-우 전쟁 이후 전 세계적으로 식품 및 비료 수출 제한 조치가 부과됨으로써 공급량이 줄면서\n","가격은 급등했다. 이에 따라 제품의 표시 사항에 대한 변경 사항이 자주 초래될 수 있고 이는 포장재와 관련하여 자원낭비 및 인건비 상승\n","등과 같은 문제를 유발할 수도 있다.\n","\n"," 또한, 소비기한 표시제의 도입으로 기업들은 제품의 생명주기를 늘려서 적용하게 될 것이며 이는 공급량 조절뿐만 아니라 재고 관리 등\n","전반적인 운영 싸이클에도 변화를 줄 것으로 보인다. \n","SPC사례\n","\n","\n","아래는 Fairlabs에서 AI 기술을 적용하여 매일 생산되는 빅데이터를 분석한 데이터이다. 해당 수치는 위 언급된 General Issues에 대해\n","부정적인 기사의 보도량을 기반으로 만들어진 지표다.\n","\n","국내 KOSPI200 기업들을 대상으로 식품(Food & Beverage) 분야에 해당되는 기업들을 그 산업별로 나눈 것이며, 해당 수치는\n","2017.1.1 ~ 2022.12.31까지의 축적된 데이터를 분석한 것이다. 각 General Issues가 6년간 얼마나 어떻게 쌓였는지를 보여주며\n","역시 위에서 언급한 바와 같이 'Product Quality & Saftey', 'Selliing Practices & Product Labelling', 'Supply\n","Chain Management'가 상위 3위를 차지했다. 그리고 \n","\n","\n","이렇듯 소비기한 표시제의 도입은 식품업체에 있어 하나의 시험이 될 것으로 보인다. 통상 유통기한보다 증대된 기한으로 인한 제품의\n","품질 및 안전 관리가 집중적으로 대두될 것이며 이에 따라 더욱더 명확하고 안전한 상품 표시 내용과 안전한 마케팅을 하기 위한 노력과\n","유통 관리에 면밀한 주의가 들어가게 될 것이다. 또한, 험난한 국제 정세에 따른 공급망 대란에도 제품의 생명 주기에 대한 조정에 이어\n","포장재의 경량화 및 친환경 포장재 사용에 영양도 챙겨야 하고 물, 전력과 같은 에너지 관리도 챙겨야 한다.\n","\n","모두가 쉽지 않은 경영 환경이지만 그 안에서 어떤 기업이 가장 발빠르게 대응하고 어떤 기업이 위험 요소를 잘 대응하지 못하는지\n","소비자들의 관심이 필요하다."]},{"cell_type":"code","execution_count":null,"id":"2dd643ca","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.431505Z","start_time":"2023-01-09T03:46:41.431491Z"}},"outputs":[],"source":["ind_compare_data, ind_compare_sasb = between_industry_exposure_total('Food & Beverage', '2017-01-01', '2022-12-31')"]},{"cell_type":"code","execution_count":null,"id":"947c04e1","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.432610Z","start_time":"2023-01-09T03:46:41.432598Z"}},"outputs":[],"source":["industry_yearly_analysis('Processed Foods', '2016-01-01', '2022-11-30', top5=True)"]},{"cell_type":"markdown","id":"f0bcdab5","metadata":{},"source":["출처\n","https://m.dongascience.com/news.php?idx=57754 (소비기한 표시제, 동아사이언스 기사)\n","https://news.mt.co.kr/mtview.php?no=2023010216103835098 (허쉬 소송 기사)\n","https://www.wowtv.co.kr/NewsCenter/News/Read?articleId=AKR20221129018100009 (크래프트 하인즈 소송 기사)\n","https://www.thinkfood.co.kr/news/articleView.html?idxno=95673 (공급망 위기, 소비기한 표시제)\n","\n","file:///Users/fairlabs/Downloads/(%EC%A3%BC%EC%A0%9C%EB%B0%9C%ED%91%9C+1-1)+%ED%83%84%EC%86%8C%EC%A4%91%EB%A6%BD+%EC%8B%9C%EB%8C%80++%EC%8B%9D%EC%9D%98%EC%95%BD+%EC%95%88%EC%A0%84%EA%B4%80%EB%A6%AC+%EC%A0%9C%EB%8F%84+%EB%B3%80%ED%99%94(%EC%8B%9D%ED%92%88+%EC%86%8C%EB%B9%84%EA%B8%B0%ED%95%9C+%ED%91%9C%EC%8B%9C%EC%A0%9C+%EB%8F%84%EC%9E%85)_%EC%8B%9D%EC%95%BD%EC%B2%98+%EB%AC%B8%EC%9E%AC%EC%9D%80+%EC%97%B0%EA%B5%AC%EA%B4%80.pdf (소비기한 표시제 도입제 프레젠테이션, 식약처, 2021.8)\n","\n","https://fv.kbiz.or.kr/v/qGECRIVuYtz#1 (소비기한 표시제 준비 안내서, 식약처, 2022.\n","\n","http://image.nongshim.com/non/man/rep/1662538890715.pdf (농심, 지속경영가능보고서 2021)\n","https://www.cj.co.kr/cj_files/2021%20Sustainability%20Report_ko.pdf (CJ 제일제당, 지속경영가능보고서 2021)\n","https://ottogi.co.kr/pds/upfile/2021-06-24_391241412.pdf (오뚜기, 지속경영가능보고서 2021)\n","https://www.oneplanetnetwork.org/knowledge-centre/resources/unep-food-waste-index-report (UNEP Food Waste Index Report Feb. 2022)\n","https://www.fao.org/fileadmin/templates/nr/sustainability_pathways/docs/FWF_and_climate_change.pdf\n","\n","\n","\n","\n"]},{"cell_type":"markdown","id":"d4009e57","metadata":{},"source":["# 독자용\n","\n","'2023년 1월 1일부로 식품 포장재에 표시되는 유통기한이 소비기한으로 변경됩니다. 다만, 식품의약품안전처(식약처)는\n","업계의 기존 포장지 소진을 통한 자원 낭비 방지 및 경영애로를 고려하여 유통기한이 표시된 기존 포장지 사용이 가능하도록\n","1년간 계도기간을 두었으며, 우유는 냉장유통환경 개선 등을 위해 8년 뒤인 2031년부터 적용하게 됩니다.'\n","\n","\n"," 우리나라는 그간 식품 구매 및 섭취와 관련하여 주로 '유통기한'을 식품 폐기시점으로 오인하는 경향이 있었습니다. 설령,\n","유통기한 이후에도 섭취가 가능함을 알고 있음에도 마음이 언제나 편안하지만은 않습니다. 그래서 유통기한이 지났다는 이유만으로\n","폐기되는 과도한 식품 폐기물량에 대해 조치가 들어가게 된 것이죠. 그렇다면 '유통기한'과 '소비기한'이란 정확히 무엇이고\n","왜 식품 폐기물량에 대해 관심을 두어야 하는지 알아보도록 하겠습니다.\n","\n"," - 유통기한 : 제품의 제조일로부터 소비자에게 유통/판매가 허용되는 기한(Sell-by date)\n"," - 소비기한 : 식품 등(건강기능식품 포함)에 표시된 보관 방법을 준수할 경우 섭취하여도 안전에 이상이 없는 기한(Use by date)\n","\n"," 국제적인 추세를 살펴보자면 이미 유럽, 호주, 일본 등의 국가들에서는 유통기한 대신 '소비기한'을 사용하고 있으며 미국은\n","유통기한과 소비기한을 같이 표시할 수 있도록 되어 있습니다. 나아가 국제식품규격위원회(CODEX)에서는 2018년부로 아예\n","'유통기한'을 식품 표시 내용에서 삭제해버리기도 했습니다. 이런 국제적 추세 속에서 우리나라는 그간 소비자가 유통기한을 식품의 폐기시점으로 오인해온 점에 따른\n","불필요하고 과도한 식품 폐기물을 감축하고자 이를 시행하게 됐습니다.\n","\n","\n"," \n"," 이는 그동안 소비자가 유통기한을 식품의 폐기시점으로 인식해온 것을 개선하고자 함과 동시에 미국, 유럽, 일본, 호주 등의 국가 및\n","국제식품규격위원회(CODEX)에서 식량낭비 감소 및 소비자 정보 제공 등을 위하여 소비기한 표시제를 운영해온 국제적인 추세를\n","반영한 결과다. 우리 나라는 식품폐기량이 연간 548만톤으로 처리비용이 약 1조 960억원에 달하며, 식품폐기 감소로 소비자는 연간\n","8860억원, 산업체는 260억원의 편익이 발생할 것으로 보인다. \n","\n","유엔환경계획(UNEP)이 지난해 발표한 '2021음식 폐기물 지수 보고서'에 따르면 소비자에게 도달하지 않고 폐기되는 식품 폐기물이 만드는 온실가스는 전 세계 배출량의 8~10%를 차지하는 것으로 알려져 있다\n","\n"," 그렇다면 이에 따른 식품 업체들의 ESG 경영 대응 방안에는 어떤 것들이 있을지 오늘은 KOSPI200 기업 내 가공식품 업체에 대해서\n","알아보고자 한다. 먼저 SASB에서 규정한 가공식품 회사들에 대한 'General Issues Code(이하 GIC)' 내용은 다음과 같다.\n"," \n"," 여러 가지 GIC가 고려되어야 하지만 식품 업체라는 특성 탓에 가장 대두되는 요소는 다음 3가지 정도로 좁혀볼 수 있다.\n","- Product Quality & Saftey\n","- Selling Practices & Product Labeling\n","- Supply Chain Management\n","\n"," 1. 아무래도 무엇보다 중요한 건 영양과 더불어 식품의 품질과 안정성이다. 2017년부로 1인당 GDP가 3만불을 돌파했으며 건강이라는\n","주제에 대한 젊은층의 관심 증대와 더불어 고령화가 심각해짐에 따라 사람들은 이제 제품의 '품질'에 대해서 많이 따지게 되었다.\n","소비기한 표시제로 인하여 섭취가 가능함에도 버려지는 식품폐기물을 줄여 온실가스 감축에 도움을 줄 수 있으나, 유통기한만을 따지던\n","나라에서 유통기한을 넘어선 소비기한을 적용시 모두가 우려하는 바는 식품이 부패하거나 오염되는 경우다.\n","\n"," 이에 따라 기업들은 오래 전부터 제품의 더 좋은 품질과 안정성을 경쟁하기 위해 HACCP(식품안전관리 인증),\n","FSSC 22000(식품안전시스템인증), KS(가공식품 산업표준인증) 등 공신력있는 품질 및 안전 관련 인증을 획득해왔다.\n","이는 각 기업의 홈페이지에서 지속경영가능보고서를 통해 참조해볼 수 있다.\n","\n"," 2. 두번째로는 기업의 마케팅과 상품 표시 관련 내용이다. 마케팅과 관련해서는 아동 대상, 영양분 주장, ESG 경영 등과 관련하여\n","소비자를 기만하는 광고 마케팅에 주로 문제가 생길 수 있다. 2021년에 코카콜라는 불충분한 재활용 시설임에도 병을 100% 재활용\n","가능하다고 한 허위 마케팅으로 고소를 당했고, 맥도날드와 버거킹은 포장지에 PFA를 사용한 혐의로 소송을 당한 바 있다.\n","는 맥도날드가 포장지에 PFA를 사용한 혐의로 지난 3월 소송을 당했고, 버거킹도 같은 혐의로 4월에 소송을 당했다.\n","\n"," 상품 표시 내용과 관련해서는 아직까지도 꾸준하게 뉴스에 등장하는 부분이다. 농식품과 관련해서는 언제나 원산지 내용으로 소비자들이\n","혼란을 겪었고 유전자변형식품(GMO)나 성분 등과 관련하여 아직까지도 종종 소송이 걸린다. 상품 표시 내용은 소비자들로 하여금\n","구매 및 섭취에 대한 결정을 내리는 데에 있어 가장 중요한 정보를 담고 있기 때문에 기업에 대한 소비자들의 신용에도 직결되는\n","매우 중요한 내용이다.\n","\n","그럼에도 불구하고 가장 최근인 2022년 12월 30일에 세계적으로 잘 알려진 초콜릿 가공 업체인 허쉬(Hershey's)는\n","한 소비자로부터 초콜릿에 중금속인 납과 카드뮴이 함유됐다는 컨슈머리포트로 인해 소송을 당했다. 또한 미국의 대표적인 식품기업인\n","크래프트 하인즈’(Kraft Heinz)는 인스턴트 제품 준비에 걸리는 시간이 사실과 다르다며 허위 광고로 소비자를 기만했다며 집단\n","소송을 냈다. 두 사례의 공통된 부분 중 인상깊은 점은 '그 내용을 알았더라면 사지 않았을 것'이라는 소비자들의 주장이다. 이같이 소비자의\n","행동을 넛지(Nudge)하도록 만드는 상품 표시 내용은 식품 기업에게 있어 확인하고 또 확인해야 할 사안이다.\n","\n"," 3. 세번째로는 공급망 관련 이슈이다. 코로나 팬데믹에 이어 러시아-우크라이나 전쟁과 인도의 밀 수출 제한 등을 겪으며 국내 기업들은\n","공급망 대란을 겪고 있는 중이다. 또한 러-우 전쟁 이후 전 세계적으로 식품 및 비료 수출 제한 조치가 부과됨으로써 공급량이 줄면서\n","가격은 급등했다. 이에 따라 제품의 표시 사항에 대한 변경 사항이 자주 초래될 수 있고 이는 포장재와 관련하여 자원낭비 및 인건비 상승\n","등과 같은 문제를 유발할 수도 있다.\n","\n"," 또한, 소비기한 표시제의 도입으로 기업들은 제품의 생명주기를 늘려서 적용하게 될 것이며 이는 공급량 조절뿐만 아니라 재고 관리 등\n","전반적인 운영 싸이클에도 변화를 줄 것으로 보인다. \n","SPC사례\n","\n","\n","아래는 Fairlabs에서 AI 기술을 적용하여 매일 생산되는 빅데이터를 분석한 데이터이다. 해당 수치는 위 언급된 General Issues에 대해\n","부정적인 기사의 보도량을 기반으로 만들어진 지표다.\n","\n","국내 KOSPI200 기업들을 대상으로 식품(Food & Beverage) 분야에 해당되는 기업들을 그 산업별로 나눈 것이며, 해당 수치는\n","2017.1.1 ~ 2022.12.31까지의 축적된 데이터를 분석한 것이다. 각 General Issues가 6년간 얼마나 어떻게 쌓였는지를 보여주며\n","역시 위에서 언급한 바와 같이 'Product Quality & Saftey', 'Selliing Practices & Product Labelling', 'Supply\n","Chain Management'가 상위 3위를 차지했다. 그리고 \n","\n","\n","이렇듯 소비기한 표시제의 도입은 식품업체에 있어 하나의 시험이 될 것으로 보인다. 통상 유통기한보다 증대된 기한으로 인한 제품의\n","품질 및 안전 관리가 집중적으로 대두될 것이며 이에 따라 더욱더 명확하고 안전한 상품 표시 내용과 안전한 마케팅을 하기 위한 노력과\n","유통 관리에 면밀한 주의가 들어가게 될 것이다. 또한, 험난한 국제 정세에 따른 공급망 대란에도 제품의 생명 주기에 대한 조정에 이어\n","포장재의 경량화 및 친환경 포장재 사용에 영양도 챙겨야 하고 물, 전력과 같은 에너지 관리도 챙겨야 한다.\n","\n","모두가 쉽지 않은 경영 환경이지만 그 안에서 어떤 기업이 가장 발빠르게 대응하고 어떤 기업이 위험 요소를 잘 대응하지 못하는지\n","소비자들의 관심이 필요하다."]},{"cell_type":"markdown","id":"24f2937b","metadata":{},"source":[" # 기관 대상 1차\n"," \n","  '2023년 1월 1일부로 식품 포장재에 표시되는 유통기한이 소비기한으로 변경된다. 다만, 식품의약품안전처(식약처)는\n","업계의 기존 포장지 소진을 통한 자원 낭비 방지 및 경영애로를 고려하여 유통기한이 표시된 기존 포장지 사용이 가능하도록\n","1년간 계도기간을 두었으며, 우유는 냉장유통환경 개선 등을 위해 8년 뒤인 2031년부터 적용하게 된다.'\n"," \n"," - 유통기한 : 제품의 제조일로부터 소비자에게 유통/판매가 허용되는 기한(Sell-by date)\n"," - 소비기한 : 식품 등(건강기능식품 포함)에 표시된 보관 방법을 준수할 경우 섭취하여도 안전에 이상이 없는 기한(Use by date)\n"," \n"," 우리나라는 그간 식품 구매 및 섭취에 있어 유통기한을 식품의 폐기시점으로 오인하는 경향이 있어왔으며 이는 과도한 식자원 낭비와\n","더불어 불필요한 식품 폐기물량을 지속적으로 유발해왔다. 우리나라의 식품폐기량은 연간 548만톤으로 처리비용이 약 1조 960억원에\n","달하며 이번 소비기한 표시제 도입으로 기대되는 식품 폐기 감소로는 소비자에게 연간 8860억원, 산업체에 260억원의 편익을 가져다 줄\n","것으로 보인다. 또한, UNEP(유엔환경계획)에서 발표한 ' Food Waste Index Report 2021'에 따르면 소비자에게 도달되지 않고\n","폐기되는 식품 폐기물에서 발생되는 온실가스는 전 세계 온실가스 배출량의 8~10%를 차지하기 때문에 해당 제도는 온실가스 감축에\n","긍정적인 효과를 가져올 것으로 기대된다. \n","\n"," 그렇다면 이러한 변화에 따른 식품 업체들의 ESG 경영에는 어떤 중요한 요소들이 있을지 오늘은 KOSPI 200 기업 내 가공식품 업계를\n","중점으로 알아보고자 한다. 다음은 미국 지속가능 회계기준 위원회(이하 SASB)가 식품 섹터 내 가공식품 업계에 대해 규정해놓은\n","'General Issues Code(이하 GIC)' 목록이다.\n","\n","----------------------------------------표-----------------------------------------------------\n","\n"," 당연히 식품 섹터에 해당되는 모든 GIC가 고려되어야 하지만, 그 중에서도 가공식품 업체라는 특성에 따라 가장 빈번히 문제시될만 한\n","요소들을 중점으로 살펴보고자 한다.\n","\n","- Product Quality & Saftey (제품의 품질 및 안전성)\n","- Selling Practices & Product Labeling (마케팅 행태과 상품 표시 내용)\n","- Supply Chain Management (공급망 이슈)\n","\n"," 1. 아무래도 '식품' 섹터인만큼 무엇보다 중요한 건 제품의 품질 및 안정성이다. 우리나라는 2017년부로 1인당 GDP가 3만불을 돌파했고\n","최근 몇 년 새 건강이라는 주제에 대한 사회적 관심도 늘어났으며 또한, 심각한 인구 고령화 등으로 인해 헬스케어 산업이 중요시되고 있다.\n","이러한 추세 속에서 사람들은 이제 제품의 품질과 안전성에 눈을 많이 돌리게 되었다. 이러한 추세 속에서 그간 유통기한만을 따져오던\n","소비자들에게 유통기한을 넘어서는 소비기한을 적용하게 될 경우 식품이 부패하고 오염이되었다는 이슈는 이전보다도 훨씬 민감하게 다가올 것이다.\n","\n"," 만일 제품의 안전성에 문제가 발생해 전량 리콜을 실시하게 될 경우 해당 식품 업체가 입는 타격은 치명적이다. 전량 회수는 그에 따른 처리 비용을\n","넘어 기업 브랜드의 이미지에도 큰 타격을 입히는데 이는 신용과 같아서 한 번 문제가 생기면 다시 회복하기까지 많은 시간이 걸린다.\n","그래서 가공 식품 업체들은 오래 전부터 제품에 대한 더 좋은 품질과 안정성을 제공하고 경쟁하기 위해 HACCP(식품안전관리 인증),\n","FSSC 22000(식품안전시스템인증), KS(가공식품 산업표준인증) 등 공신력있는 품질 및 안전 관련 인증 획득에 지속적으로 신경써왔고 이는\n","각 기업의 홈페이지에서 올라와있는 지속경영가능보고서를 통해서도 확인해볼 수 있다.\n","\n","cj\n","오뚜기\n","오리온\n","\n"," 2. 두번째로는 기업의 '마케팅 행태와 상품 표시 내용' 부분이다. 기업들의 마케팅 행태와 관련해서는 주로 아동 대상, 영양 성분, ESG 경영\n","등에 대해 소비자를 기만하는 허위 과장 광고 및 그린워싱 사례를 조심해야 한다. 2021년도에 코카콜라는 불충분한 재활용 시설임에도 병을 100%\n","재활용 가능하다고 한 것에 대해 허위 마케팅으로 고소를 당한 바 있으며, 국내 기업인 남양유업은 불가리스 제품이 코로나19 억제에 효과가 있다고\n","발표하여 여론의 뭇매를 맞기도 했다. 이 외에도 스타벅스에서 내놓은 '종이 빨대'는 실제로 거의 재활용할 수 없고 일반 쓰레기와 같이 매립지로\n","보내지거나 소각되며 플라스틱 빨대를 생산할 때보다 더 많은 이산화탄소를 배출한다는 연구도 계속해서 나오고 있다.\n","\n"," 다음으로는 '상품 표시 내용' 부분이다. 특히 농식품과 관련해서는 법망을 피해 원산지를 속이는 문제가 늘 소비자들에게 혼란을 초래해왔다.\n","또한, 원산지뿐만 아니라 정확한 영양분 표시, 성분 표시, 유전자변형식품(GMO) 등과 관련하여서도 종종 소송이 걸린다. 상품 표시 내용은 소비자들로\n","하여금 구매 및 섭취에 대한 최종 결정을 내리는 데에 있어 매우 중요한 정보를 담고 있기 때문에 이는 기업에 대한 소비자들의 신용에도 직결되는\n","매우 중요한 내용이다.\n","\n"," 이같은 위험이 있음에도 최근 2022년 12월 30일에 세계적으로 잘 알려진 초콜릿 가공 업체인 허쉬(Hershey's)가 한 소비자로부터 초콜릿에\n","중금속인 납과 카드뮴이 함유됐다는 이유로 소송을 당했다. 또한 미국의 대표적인 식품 기업인 크래프트 하인즈’(Kraft Heinz)는 인스턴트 제품\n","준비에 걸리는 시간이 사실과 다르다며 허위 광고로 소비자를 기만했다는 이유로 집단 소송을 당했다. 두 사례에 대해 인상깊은 점은 모두 '그 내용을\n","알았더라면 사지 않았을 것'이라는 소비자들의 공통된 주장이다. 이같이 소비자의 행동을 넛지(Nudge)하도록 만드는 상품 표시 내용은 식품 기업에게\n","있어 확인하고 또 확인해야 할 사안이다.\n","\n"," 3. 세번째로는 공급망 관련 이슈이다. 코로나 팬데믹에 이어 러시아-우크라이나 전쟁과 인도의 밀 수출 제한 등을 겪으며 국내 기업들은 공급망 대란을\n","겪고 있는 중이다. 또한 러-우 전쟁 이후 전 세계적으로 식품 및 비료 수출 제한 조치가 부과됨으로써 공급량이 줄면서 가격은 급등했다. 이에 따라\n","제품의 표시 사항에 대해 변경 사항이 자주 적용될 수 있고 이는 포장재와 관련하여 자원낭비 및 인건비 상승 등과 같은 문제를 유발할 수도 있다. 이같은\n","국제 정세에 따른 경제적 충격 외에도 국내 생산 과정에 대한 면멸한 관리 및 감독 또한 매우 중요하다. 일례로, 지난해 국내 기업 SPC에서는 인건비\n","절감과 더불어 생산 과정에 대한 면밀한 감시 부재로 인해 '2인 1조'라는 매뉴얼을 준수하지 않은채 빵 공장을 운영하다 한 20대 노동자가 사망한 사건이\n","있다. 해당 업체는 예전부터 이러한 사회적 이슈가 많았으며 해당 사건 8일 이후에도 절단기에 손이 잘리는 사고가 발생하는 등 지속적 이슈가 발생함으로\n","인해 불매 운동이 시작됐다. 이는 기업에게 있어 운영 및 투자에 들어가야할 자금이 소송 준비 및 브랜드 이미지 관리에 들어감으로써 타 업체에 비해\n","경쟁력이 급감하게 된다.\n","\n"," 또한, 소비기한 표시제의 도입으로 기업들은 제품의 생명주기를 늘려서 적용하게 될 것이며 이는 공급량 조절뿐만 아니라 재고 관리 등\n","전반적인 운영 싸이클에도 변화를 줄 것으로 보인다. \n","\n","\n","아래는 Fairlabs에서 AI 기술을 적용하여 매일 생산되는 빅데이터를 분석한 데이터이다. 해당 수치는 위 언급된 General Issues에 대해\n","부정적인 기사의 보도량을 기반으로 만들어진 지표다.\n","\n","국내 KOSPI200 기업들을 대상으로 식품(Food & Beverage) 분야에 해당되는 기업들을 그 산업별로 나눈 것이며, 해당 수치는\n","2017.1.1 ~ 2022.12.31까지의 축적된 데이터를 분석한 것이다. 각 General Issues가 6년간 얼마나 어떻게 쌓였는지를 보여주며\n","역시 위에서 언급한 바와 같이 'Product Quality & Saftey', 'Selliing Practices & Product Labelling', 'Supply\n","Chain Management'가 상위 3위를 차지했다. 그리고 \n","\n","\n","이렇듯 소비기한 표시제의 도입은 식품업체에 있어 하나의 시험이 될 것으로 보인다. 통상 유통기한보다 증대된 기한으로 인한 제품의\n","품질 및 안전 관리가 집중적으로 대두될 것이며 이에 따라 더욱더 명확하고 안전한 상품 표시 내용과 안전한 마케팅을 하기 위한 노력과\n","유통 관리에 면밀한 주의가 들어가게 될 것이다. 또한, 험난한 국제 정세에 따른 공급망 대란에도 제품의 생명 주기에 대한 조정에 이어\n","포장재의 경량화 및 친환경 포장재 사용에 영양도 챙겨야 하고 물, 전력과 같은 에너지 관리도 챙겨야 한다.\n","\n","모두가 쉽지 않은 경영 환경이지만 그 안에서 어떤 기업이 가장 발빠르게 대응하고 어떤 기업이 위험 요소를 잘 대응하지 못하는지\n","소비자들의 관심이 필요하다."]},{"cell_type":"markdown","id":"0743e23d","metadata":{},"source":[" # 기관 대상 제작\n"," \n",">'2023년 1월 1일부로 식품 포장재에 표시되는 유통기한이 소비기한으로 변경된다. 다만, 식품의약품안전처(식약처)는 업계의 기존<br>\n","포장지 소진을 통한 자원 낭비 방지 및 경영애로를 고려하여 유통기한이 표시된 기존 포장지 사용이 가능하도록 1년간 계도기간을 두었으며,<br>\n","우유는 냉장유통환경 개선 등을 위해 8년 뒤인 2031년부터 적용하게 된다.'<br>\n","\n"," - 유통기한 : 제품의 제조일로부터 소비자에게 유통/판매가 허용되는 기한(Sell-by date)\n"," - 소비기한 : 식품 등(건강기능식품 포함)에 표시된 보관 방법을 준수할 경우 섭취하여도 안전에 이상이 없는 기한(Use by date)<br>\n"," \n","\n"," 우리나라는 식품 구매와 섭취에 있어 유통기한을 식품의 폐기시점으로 오인하는 경향이 만연한데 이는 실제로 과도한 식자원 낭비와 불필요한<br>\n","식품 폐기물량 배출을 지속적으로 유발해했다. 이미 유럽, 호주, 일본 등의 국가들에서는 유통기한을 대신해 소비기한을 사용하고 있으며<br>\n","미국은 둘 다 표시가 가능하도록 되어 있다. 나아가 국제식품규격위원회(CODEX)에서는 2018년부로 유통기한을 식품 표시 내용에서 아예<br>\n","삭제했다.<br>\n","\n"," 식약처에 따르면 우리나라의 식품 폐기량은 연간 548만톤으로 처리비용이 약 1조 960억원에 달하며 이번 소비기한 표시제 도입 시 식품<br>\n","폐기물 감소로 소비자에게 연간 8860억원, 산업체에 260억원의 편익을 가져다 준다고 한다. 그리고 UNEP(유엔환경계획)가<br>\n","'Food Waste Index Report 2021'를 통해 '소비자에게 도달되지 않고 폐기되는 식품 폐기물에서 발생되는 온실가스가 전 세계 온실가스<br>\n","배출량의 8~10%를 차지한다'고 발표한 만큼 해당 제도의 도입은 온실가스 감축에 긍정적인 효과를 가져올 것으로 기대된다. <br>\n","\n"," 그렇다면 이러한 변화에 따른 식품 업계들의 ESG 경영에는 어떤 중요한 요소들이 있을지 알아보고자 한다. 다음은 미국 지속가능 회계기준<br>\n","위원회(이하 SASB)가 식품 섹터(Food & Beverage) 전체적인 부분과 섹터 내 각 산업별로 중요하다고 규정해놓은 'General Issues<br>\n","(이하 GIC)' 목록이다. 오늘은 그 중에서도 KOSPI200 기업을 한정하여 가공식품(Processed Foods)를 중점으로 살펴보겠다. 해당<br>\n","기업으로는 'CJ', 'CJ제일제당', '농심', 동원산업', '롯데지주', '오뚜기', '오리온'이 있다.<br>"]},{"cell_type":"code","execution_count":null,"id":"1e540893","metadata":{},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"id":"aa0112ab","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.433768Z","start_time":"2023-01-09T03:46:41.433756Z"}},"outputs":[],"source":["gic_sector_df"]},{"cell_type":"markdown","id":"b4dad379","metadata":{"ExecuteTime":{"end_time":"2023-01-06T05:24:03.736830Z","start_time":"2023-01-06T05:24:03.726536Z"}},"source":["SASB에서 가공식품 업계에 대해 따로 중요하게 지정해놓은 이슈들 중에서도 '가공 식품'라는 특성에 따라 가장 빈번히 문제시될만 한<br>\n","요소들을 뽑아보면 다음과 같다.<br>\n","\n","- Product Quality & Saftey (제품의 품질 및 안전성)\n","- Selling Practices & Product Labeling (마케팅 행태과 상품 표시 내용)\n","- Supply Chain Management (공급망 이슈)<br>\n","<br>\n","\n","1. 제품의 품질 및 안전성<br>\n"," 아무래도 '식품' 섹터인만큼 무엇보다 중요한 건 제품의 품질과 안정성이다. 우리나라의 건강관리 시장 규모는 2021년에 전년대비 33%가<br>\n","증가한 253조에 달한다. 최근 건강이라는 주제에 대한 사회 전반적인 관심이 늘어남으로 인해 사람들은 점차 제품의 품질과 안전성에 관심을<br>\n","많이 가지게 되었다. 이러한 추세 속에 그간 유통기한만을 따져오던 소비자들에게 유통기한을 넘어서는 소비기한을 적용하게 될시 식품의<br>\n","품질과 안전성에 대한 이슈는 그 어느 때보다도 훨씬 민감하게 다가올 것이다.<br>\n","\n"," 또한, 제품의 안전성에 문제가 발생해 전량 리콜을 실시하게 될 경우 해당 식품 업체가 입게 될 타격은 치명적이다. 전량 회수에 따른 처리<br>\n","비용도 비용이지만 기업 브랜드의 이미지에도 큰 타격을 입게 되는데 이는 신용과 같아서 한 번 문제가 터지면 다시 원상태로 회복하기까지<br>\n","엄청난 시간과 비용이 들어간다.<br>\n","\n"," 그래서 가공 식품 업체들은 오래 전부터 제품에 대한 더 좋은 품질과 안정성을 제공하고 경쟁하기 위해 HACCP(식품안전관리 인증),<br>\n","FSSC 22000(식품안전시스템인증), KS(가공식품 산업표준인증) 등 공신력있는 품질 및 안전 관련 인증 획득에 지속적으로 신경써왔다. 이를<br>\n","통해 본인이 관심있고 자주 소비하는 기업의 제품이 안전한지 1차적으로 확인할 수 있으며, 각 기업들의 홈페이지에서 올라와있는 지속 경영<br>\n","가능 보고서를 통해 언제든지 확인해볼 수 있다.<br>\n","\n"," 아래의 인증마크들이 있으면 일단 식품 품질 면에서는 기본적으로 안심하고 소비할 수 있다.<br>\n"," "]},{"cell_type":"code","execution_count":null,"id":"1fa1e8f2","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.435196Z","start_time":"2023-01-09T03:46:41.435180Z"},"scrolled":true},"outputs":[],"source":["Image('/Users/fairlabs/Desktop/Workspace/FB-PF/HACCP_logo.png')"]},{"cell_type":"markdown","id":"8bff3280","metadata":{"ExecuteTime":{"end_time":"2023-01-06T07:42:51.657452Z","start_time":"2023-01-06T07:42:51.522252Z"}},"source":["![HACCP](/Users/fairlabs/Desktop/Workspace/FB-PF/HACCP_logo)"]},{"cell_type":"markdown","id":"594c8dab","metadata":{"ExecuteTime":{"end_time":"2023-01-06T06:01:34.039919Z","start_time":"2023-01-06T06:01:34.025246Z"}},"source":[" 2. Selling Practices & Product Labeling\n"," 두번째로는 기업의 판매 행태와 상품 표시 내용이다. 기업들은 제품을 판매하기 위해서 정확한 정보 전달이 수반되어야 한다. 특히 마케팅에<br>\n","있어 주로 아동 대상, 영양 성분, ESG 경영 등의 주제에 대해 소비자를 기만하는 허위 과장 광고 및 그린워싱 사례가 발생하지 않도록 항상<br>\n","주의해야 한다. 예를 들어, 2021년도에 코카콜라는 불충분한 재활용 시설임에도 병을 100% 재활용 가능하다고 한 것에 대해 허위 마케팅으로<br>\n","고소를 당한 바 있으며, 국내 기업인 남양유업은 불가리스 제품이 코로나19 억제에 효과가 있다고 발표하여 여론의 뭇매를 맞기도 했다. 이<br>\n","외에도 스타벅스에서 내놓은 '종이 빨대'는 실제로 거의 재활용할 수 없고 일반 쓰레기와 같이 매립지로 보내지거나 소각되며 플라스틱 빨대를<br>\n","생산할 때보다 더 많은 이산화탄소를 배출한다는 연구가 지속적으로 발표됨에 따라 대표적인 그린워싱의 사례로 손꼽히는 추세다.<br>\n","\n"," 다음으로는 '상품 표시 내용' 부분이다. 상품 표시 내용은 소비자들로 하여금 구매 및 섭취에 대한 최종 결정을 내리는 데에 있어 매우<br>\n","중요한 정보로서 이는 기업에 대한 소비자들의 신용에도 직결된다. 그럼에도 매번 법망을 피해 원산지를 속이는 것부터 시작해 영양분 표시,<br>\n","성분 표시, 유전자변형식품(GMO) 표시 등과 관련하여 여전히 빈번히 소송당한다.<br>\n","\n"," 일례로, 최근 2022년 12월 30일에 세계적으로 잘 알려진 초콜릿 가공 업체인 허쉬(Hershey's)가 한 소비자로부터 초콜릿에 중금속인<br>\n","납과 카드뮴이 함유됐다는 이유로 소송을 당했다. 그리고 미국의 대표적인 식품 기업인 크래프트 하인즈’(Kraft Heinz)도 소비자들로부터<br>\n","인스턴트 제품 준비에 걸리는 시간이 사실과 달라 허위 광고로 소비자를 기만했다며 집단 소송을 당했다. 두 사례에 모두 인상깊은 점은 '그<br>\n","내용을 알았더라면 사지 않았을 것'이라는 소비자들의 공통된 주장이다. 이는 소비자의 행동을 넛지(Nudge)하는 상품 표시 내용이 제품을<br>\n","제공하는 기업들에게 있어 매우 중요한 사안임을 부각시킨다.<br>\n","\n","\n"," 3. Supply Chain Management\n"," 세번째로는 공급망 관련 이슈이다. 코로나 팬데믹에 이어 러시아-우크라이나 전쟁과 인도의 밀 수출 제한 등을 겪으며 국내 기업들은 공급망<br>\n","대란을 겪고 있는 중이다. 또한 러-우 전쟁 이후 전 세계적으로 식품 및 비료 수출 제한 조치가 부과됨으로써 공급량은 줄고 가격은 급등했다.<br>\n","이에 따라 각 기업들은 원산지 변경이나 가격 변경으로 제품의 표시 사항에 대해 변경 사항이 자주 생길 경우 이는 포장재와 관련하여 자원낭비<br>\n","및 인건비 상승 등과 같은 문제가 발생할 수도 있다.<br>\n","\n"," 또한, 위와 같은 국제 정세에 따른 경제적 비용 외로 제품 생산 및 공급에 대한 면멸한 관리 및 감독 또한 매우 중요하다. 일례로, 지난해<br>\n","국내 기업 SPC에서는 인건비 절감을 위해 '2인 1조'라는 매뉴얼을 준수하지 않은채 빵 공장을 운영하다 한 20대 노동자가 기계에 끼여 사망한<br>\n","사건이 발생했다. 이는 불매 운동으로 번졌으며 불매운동은 기업에게 있어 매출뿐만 아니라 소송 및 브랜드 이미지 재활에 대한 막대한 자금<br>\n","투입으로 기업의 경영에 큰 애로사항이 된다. 이와 같은 사고를 방지하기 위해 기업은 협렵업체 및 공급업체를 선정하고 평가할 때 품질, 안전,<br>\n","재무 건전성, 인권, 환경, 반부패 등의 행동규범 준수 내용을 표준계약서에 명시하는 등 공급업체 관리에도 주의해야 한다.<br>\n","\n","\n"," 아래는 AI 기술을 적용하여 매일 생산되는 빅데이터를 분석한 결과이다. 국내 KOSPI200 기업들을 대상으로 식품(Food &<br>\n","Beverage) 분야에 해당되는 기업들을 그 산업별로 나눈 것이며, 해당 수치는 2017.1.1 ~ 2022.12.31까지의 축적된 데이터를 분석한<br>\n","것이다. 각 General Issues가 6년간 얼마나 어떻게 쌓였는지를 보여주며 역시 위에서 언급한 바와 같이 'Product Quality &<br>\n","Saftey', 'Selling Practices & Product Labeling', 'Supply Chain Management'가 상위 3위를 차지했다.<br>"]},{"cell_type":"code","execution_count":35,"id":"d1947f94","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:49:44.584287Z","start_time":"2023-01-09T03:47:01.919764Z"}},"outputs":[{"name":"stdout","output_type":"stream","text":["There is no any data in 'esg_exposure' or 'esg_pulse' for [Agricultural Products] industry\n","There is no any data in 'esg_exposure' or 'esg_pulse' for [Tobacco] industry\n","There is no any data in 'esg_exposure' or 'esg_pulse' for [Meat, Poultry & Dairy] industry\n","There is no any data in 'esg_exposure' or 'esg_pulse' for [Restaurants] industry\n"]},{"data":{"text/html":["<style type=\"text/css\">\n","#T_e763b_row0_col1 {\n","  width: 10em;\n","  background: linear-gradient(90deg, lavender 36.2%, transparent 36.2%);\n","}\n","#T_e763b_row0_col3 {\n","  width: 10em;\n","  background: linear-gradient(90deg, lavender 24.0%, transparent 24.0%);\n","}\n","#T_e763b_row0_col5 {\n","  width: 10em;\n","  background: linear-gradient(90deg, lavender 63.3%, transparent 63.3%);\n","}\n","#T_e763b_row0_col7 {\n","  width: 10em;\n","  background: linear-gradient(90deg, lavender 51.8%, transparent 51.8%);\n","}\n","#T_e763b_row1_col1 {\n","  width: 10em;\n","  background: linear-gradient(90deg, lavender 20.5%, transparent 20.5%);\n","}\n","#T_e763b_row1_col3 {\n","  width: 10em;\n","  background: linear-gradient(90deg, lavender 23.4%, transparent 23.4%);\n","}\n","#T_e763b_row1_col5 {\n","  width: 10em;\n","  background: linear-gradient(90deg, lavender 13.4%, transparent 13.4%);\n","}\n","#T_e763b_row1_col7 {\n","  width: 10em;\n","  background: linear-gradient(90deg, lavender 24.5%, transparent 24.5%);\n","}\n","#T_e763b_row2_col1 {\n","  width: 10em;\n","  background: linear-gradient(90deg, lavender 18.7%, transparent 18.7%);\n","}\n","#T_e763b_row2_col3 {\n","  width: 10em;\n","  background: linear-gradient(90deg, lavender 20.8%, transparent 20.8%);\n","}\n","#T_e763b_row2_col5 {\n","  width: 10em;\n","  background: linear-gradient(90deg, lavender 10.0%, transparent 10.0%);\n","}\n","#T_e763b_row2_col7 {\n","  width: 10em;\n","  background: linear-gradient(90deg, lavender 14.7%, transparent 14.7%);\n","}\n","#T_e763b_row3_col1 {\n","  width: 10em;\n","  background: linear-gradient(90deg, lavender 16.4%, transparent 16.4%);\n","}\n","#T_e763b_row3_col3 {\n","  width: 10em;\n","  background: linear-gradient(90deg, lavender 15.6%, transparent 15.6%);\n","}\n","#T_e763b_row3_col5 {\n","  width: 10em;\n","  background: linear-gradient(90deg, lavender 7.7%, transparent 7.7%);\n","}\n","#T_e763b_row3_col7 {\n","  width: 10em;\n","  background: linear-gradient(90deg, lavender 5.3%, transparent 5.3%);\n","}\n","#T_e763b_row4_col1 {\n","  width: 10em;\n","  background: linear-gradient(90deg, lavender 4.5%, transparent 4.5%);\n","}\n","#T_e763b_row4_col3 {\n","  width: 10em;\n","  background: linear-gradient(90deg, lavender 6.2%, transparent 6.2%);\n","}\n","#T_e763b_row4_col5 {\n","  width: 10em;\n","  background: linear-gradient(90deg, lavender 5.5%, transparent 5.5%);\n","}\n","#T_e763b_row4_col7 {\n","  width: 10em;\n","  background: linear-gradient(90deg, lavender 3.8%, transparent 3.8%);\n","}\n","#T_e763b_row5_col1 {\n","  width: 10em;\n","  background: linear-gradient(90deg, lavender 3.7%, transparent 3.7%);\n","}\n","#T_e763b_row5_col3 {\n","  width: 10em;\n","  background: linear-gradient(90deg, lavender 4.7%, transparent 4.7%);\n","}\n","#T_e763b_row5_col5, #T_e763b_row5_col7, #T_e763b_row6_col1, #T_e763b_row6_col5, #T_e763b_row6_col7, #T_e763b_row7_col1, #T_e763b_row7_col5, #T_e763b_row7_col7 {\n","  width: 10em;\n","}\n","#T_e763b_row6_col3 {\n","  width: 10em;\n","  background: linear-gradient(90deg, lavender 2.7%, transparent 2.7%);\n","}\n","#T_e763b_row7_col3 {\n","  width: 10em;\n","  background: linear-gradient(90deg, lavender 2.6%, transparent 2.6%);\n","}\n","</style>\n","<table id=\"T_e763b\">\n","  <thead>\n","    <tr>\n","      <th class=\"blank level0\" >&nbsp;</th>\n","      <th id=\"T_e763b_level0_col0\" class=\"col_heading level0 col0\" >Food Retailers & Distributors</th>\n","      <th id=\"T_e763b_level0_col1\" class=\"col_heading level0 col1\" >Food Retailers & Distributors_esg_exposure(%)</th>\n","      <th id=\"T_e763b_level0_col2\" class=\"col_heading level0 col2\" >Processed Foods</th>\n","      <th id=\"T_e763b_level0_col3\" class=\"col_heading level0 col3\" >Processed Foods_esg_exposure(%)</th>\n","      <th id=\"T_e763b_level0_col4\" class=\"col_heading level0 col4\" >Non-Alcoholic Beverages</th>\n","      <th id=\"T_e763b_level0_col5\" class=\"col_heading level0 col5\" >Non-Alcoholic Beverages_esg_exposure(%)</th>\n","      <th id=\"T_e763b_level0_col6\" class=\"col_heading level0 col6\" >Alcoholic Beverages</th>\n","      <th id=\"T_e763b_level0_col7\" class=\"col_heading level0 col7\" >Alcoholic Beverages_esg_exposure(%)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th id=\"T_e763b_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n","      <td id=\"T_e763b_row0_col0\" class=\"data row0 col0\" >Selling Practices & Product Labeling</td>\n","      <td id=\"T_e763b_row0_col1\" class=\"data row0 col1\" >36.22</td>\n","      <td id=\"T_e763b_row0_col2\" class=\"data row0 col2\" >Product Quality & Safety</td>\n","      <td id=\"T_e763b_row0_col3\" class=\"data row0 col3\" >24.02</td>\n","      <td id=\"T_e763b_row0_col4\" class=\"data row0 col4\" >Selling Practices & Product Labeling</td>\n","      <td id=\"T_e763b_row0_col5\" class=\"data row0 col5\" >63.34</td>\n","      <td id=\"T_e763b_row0_col6\" class=\"data row0 col6\" >Selling Practices & Product Labeling</td>\n","      <td id=\"T_e763b_row0_col7\" class=\"data row0 col7\" >51.81</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_e763b_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n","      <td id=\"T_e763b_row1_col0\" class=\"data row1 col0\" >Product Quality & Safety</td>\n","      <td id=\"T_e763b_row1_col1\" class=\"data row1 col1\" >20.46</td>\n","      <td id=\"T_e763b_row1_col2\" class=\"data row1 col2\" >Selling Practices & Product Labeling</td>\n","      <td id=\"T_e763b_row1_col3\" class=\"data row1 col3\" >23.38</td>\n","      <td id=\"T_e763b_row1_col4\" class=\"data row1 col4\" >Product Design & Lifecycle Management</td>\n","      <td id=\"T_e763b_row1_col5\" class=\"data row1 col5\" >13.40</td>\n","      <td id=\"T_e763b_row1_col6\" class=\"data row1 col6\" >Product Design & Lifecycle Management</td>\n","      <td id=\"T_e763b_row1_col7\" class=\"data row1 col7\" >24.47</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_e763b_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n","      <td id=\"T_e763b_row2_col0\" class=\"data row2 col0\" >Customer Welfare</td>\n","      <td id=\"T_e763b_row2_col1\" class=\"data row2 col1\" >18.74</td>\n","      <td id=\"T_e763b_row2_col2\" class=\"data row2 col2\" >Supply Chain Management</td>\n","      <td id=\"T_e763b_row2_col3\" class=\"data row2 col3\" >20.82</td>\n","      <td id=\"T_e763b_row2_col4\" class=\"data row2 col4\" >Water & Wastewater Management</td>\n","      <td id=\"T_e763b_row2_col5\" class=\"data row2 col5\" >10.03</td>\n","      <td id=\"T_e763b_row2_col6\" class=\"data row2 col6\" >Supply Chain Management</td>\n","      <td id=\"T_e763b_row2_col7\" class=\"data row2 col7\" >14.67</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_e763b_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n","      <td id=\"T_e763b_row3_col0\" class=\"data row3 col0\" >Supply Chain Management</td>\n","      <td id=\"T_e763b_row3_col1\" class=\"data row3 col1\" >16.37</td>\n","      <td id=\"T_e763b_row3_col2\" class=\"data row3 col2\" >Product Design & Lifecycle Management</td>\n","      <td id=\"T_e763b_row3_col3\" class=\"data row3 col3\" >15.61</td>\n","      <td id=\"T_e763b_row3_col4\" class=\"data row3 col4\" >Supply Chain Management</td>\n","      <td id=\"T_e763b_row3_col5\" class=\"data row3 col5\" >7.69</td>\n","      <td id=\"T_e763b_row3_col6\" class=\"data row3 col6\" >Water & Wastewater Management</td>\n","      <td id=\"T_e763b_row3_col7\" class=\"data row3 col7\" >5.29</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_e763b_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n","      <td id=\"T_e763b_row4_col0\" class=\"data row4 col0\" >Labor Practices</td>\n","      <td id=\"T_e763b_row4_col1\" class=\"data row4 col1\" >4.48</td>\n","      <td id=\"T_e763b_row4_col2\" class=\"data row4 col2\" >Materials Sourcing & Efficiency</td>\n","      <td id=\"T_e763b_row4_col3\" class=\"data row4 col3\" >6.15</td>\n","      <td id=\"T_e763b_row4_col4\" class=\"data row4 col4\" >Customer Welfare</td>\n","      <td id=\"T_e763b_row4_col5\" class=\"data row4 col5\" >5.54</td>\n","      <td id=\"T_e763b_row4_col6\" class=\"data row4 col6\" >Materials Sourcing & Efficiency</td>\n","      <td id=\"T_e763b_row4_col7\" class=\"data row4 col7\" >3.76</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_e763b_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n","      <td id=\"T_e763b_row5_col0\" class=\"data row5 col0\" >Energy Management</td>\n","      <td id=\"T_e763b_row5_col1\" class=\"data row5 col1\" >3.73</td>\n","      <td id=\"T_e763b_row5_col2\" class=\"data row5 col2\" >Customer Welfare</td>\n","      <td id=\"T_e763b_row5_col3\" class=\"data row5 col3\" >4.65</td>\n","      <td id=\"T_e763b_row5_col4\" class=\"data row5 col4\" >nan</td>\n","      <td id=\"T_e763b_row5_col5\" class=\"data row5 col5\" >nan</td>\n","      <td id=\"T_e763b_row5_col6\" class=\"data row5 col6\" >nan</td>\n","      <td id=\"T_e763b_row5_col7\" class=\"data row5 col7\" >nan</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_e763b_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n","      <td id=\"T_e763b_row6_col0\" class=\"data row6 col0\" >nan</td>\n","      <td id=\"T_e763b_row6_col1\" class=\"data row6 col1\" >nan</td>\n","      <td id=\"T_e763b_row6_col2\" class=\"data row6 col2\" >Energy Management</td>\n","      <td id=\"T_e763b_row6_col3\" class=\"data row6 col3\" >2.74</td>\n","      <td id=\"T_e763b_row6_col4\" class=\"data row6 col4\" >nan</td>\n","      <td id=\"T_e763b_row6_col5\" class=\"data row6 col5\" >nan</td>\n","      <td id=\"T_e763b_row6_col6\" class=\"data row6 col6\" >nan</td>\n","      <td id=\"T_e763b_row6_col7\" class=\"data row6 col7\" >nan</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_e763b_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n","      <td id=\"T_e763b_row7_col0\" class=\"data row7 col0\" >nan</td>\n","      <td id=\"T_e763b_row7_col1\" class=\"data row7 col1\" >nan</td>\n","      <td id=\"T_e763b_row7_col2\" class=\"data row7 col2\" >Water & Wastewater Management</td>\n","      <td id=\"T_e763b_row7_col3\" class=\"data row7 col3\" >2.63</td>\n","      <td id=\"T_e763b_row7_col4\" class=\"data row7 col4\" >nan</td>\n","      <td id=\"T_e763b_row7_col5\" class=\"data row7 col5\" >nan</td>\n","      <td id=\"T_e763b_row7_col6\" class=\"data row7 col6\" >nan</td>\n","      <td id=\"T_e763b_row7_col7\" class=\"data row7 col7\" >nan</td>\n","    </tr>\n","  </tbody>\n","</table>\n"],"text/plain":["<pandas.io.formats.style.Styler at 0x7ff655ce7370>"]},"metadata":{},"output_type":"display_data"}],"source":["ind_compare_data, ind_compare_sasb = between_industry_exposure_total('Food & Beverage', '2017-01-01', '2022-12-31')"]},{"cell_type":"markdown","id":"5a1e29f2","metadata":{},"source":[" 6년간 누적 데이터 외에도 밑의 연간 그래프를 보면, 'Product Quality & Safety'와 'Selling Practices & Practices &<br>\n"," Labeling'은 꾸준히 증가하다 2022년도에 크게 줄었으며, 'Supply Chain Management'는 역시 급변하는 국제 정세에 따라 2022년에<br>\n"," 급증했음을 알 수 있다.<br>"]},{"cell_type":"code","execution_count":null,"id":"276ff162","metadata":{"ExecuteTime":{"end_time":"2023-01-09T03:46:41.437477Z","start_time":"2023-01-09T03:46:41.437465Z"}},"outputs":[],"source":["industry_yearly_analysis('Processed Foods','2016-01-01','2022-12-31',top5 = True)"]},{"cell_type":"markdown","id":"cb4432a5","metadata":{},"source":[" 이렇듯 소비기한 표시제의 도입은 가공식품 업계에 있어 하나의 시험대가 될 것으로 보인다. 통상 유통기한보다 긴 소비기한으로 인해 제품의<br>\n","품질 및 안전 관리가 집중적으로 대두될 것이며 이에 따라 더욱더 명확하고 안전한 상품 표시 내용, 건전한 마케팅, 유통 관리 등에 이전보다<br>\n","더욱 면밀하게 주의해야 한다. 또한, 험난한 국제 정세에 따른 공급망 대란 속에서도 제품의 생명 주기에 대한 조정과 더불어 포장재의 경량화<br>\n","및 친환경 포장재 사용, 영양 고려, 물과 전력 등의 에너지 관리도 챙겨야 한다.<br>\n","\n"," 모두가 쉽지 않은 경영 환경이지만 그 안에서 어떤 기업이 가장 발빠르게 변화에 대응하고 어떤 기업이 위험 요소를 잘 대응해내지 못하는지<br>\n","소비자들과 투자자들은 주의깊게 바라볼 필요가 있다. 당신과 당신 가족이 먹게 될 식품을 만드는 기업들이기 때문이다.<br>"]},{"cell_type":"code","execution_count":null,"id":"d6392f53","metadata":{},"outputs":[],"source":[]}],"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.8"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{"height":"calc(100% - 180px)","left":"10px","top":"150px","width":"237.984px"},"toc_section_display":true,"toc_window_display":true},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"position":{"height":"663px","left":"1414px","right":"20px","top":"120px","width":"358px"},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"nbformat":4,"nbformat_minor":5},"title":"ESG_Visualization_v2.1"},"__N_SSG":true}